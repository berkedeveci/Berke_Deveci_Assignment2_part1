
project3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d84  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f64  08006f64  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08006f64  08006f64  00016f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f6c  08006f6c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f6c  08006f6c  00016f6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08006f74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001c44  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001d40  20001d40  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de7e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a3  00000000  00000000  0002dfaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b38  00000000  00000000  00030850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a00  00000000  00000000  00031388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b93  00000000  00000000  00031d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecf9  00000000  00000000  0005491b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3dd9  00000000  00000000  00063614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001273ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c68  00000000  00000000  00127440  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ef4 	.word	0x08006ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08006ef4 	.word	0x08006ef4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 f9af 	bl	8000834 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f845 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f8ab 	bl	8000634 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80004de:	f005 ffdb 	bl	8006498 <MX_USB_DEVICE_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(receivebuffer[0] != 0x00) {
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <main+0x84>)
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d0fb      	beq.n	80004e2 <main+0x16>
		  for(int i=0; i<8; i++) {
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	e027      	b.n	8000540 <main+0x74>
			  if((receivebuffer[0] & 1<<i) > 0) bit_state=1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <main+0x84>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	4619      	mov	r1, r3
 80004f6:	2201      	movs	r2, #1
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	fa02 f303 	lsl.w	r3, r2, r3
 80004fe:	400b      	ands	r3, r1
 8000500:	2b00      	cmp	r3, #0
 8000502:	dd03      	ble.n	800050c <main+0x40>
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <main+0x88>)
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
 800050a:	e002      	b.n	8000512 <main+0x46>
			  else bit_state=0;
 800050c:	4b11      	ldr	r3, [pc, #68]	; (8000554 <main+0x88>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]

			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, bit_state);
 8000512:	4b10      	ldr	r3, [pc, #64]	; (8000554 <main+0x88>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800051c:	480e      	ldr	r0, [pc, #56]	; (8000558 <main+0x8c>)
 800051e:	f000 fce5 	bl	8000eec <HAL_GPIO_WritePin>
			  pin_state=HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000526:	480d      	ldr	r0, [pc, #52]	; (800055c <main+0x90>)
 8000528:	f000 fcc8 	bl	8000ebc <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	461a      	mov	r2, r3
 8000530:	4b0b      	ldr	r3, [pc, #44]	; (8000560 <main+0x94>)
 8000532:	701a      	strb	r2, [r3, #0]
			  HAL_Delay(250);
 8000534:	20fa      	movs	r0, #250	; 0xfa
 8000536:	f000 f9ef 	bl	8000918 <HAL_Delay>
		  for(int i=0; i<8; i++) {
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	3301      	adds	r3, #1
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b07      	cmp	r3, #7
 8000544:	ddd4      	ble.n	80004f0 <main+0x24>
		  }
		  receivebuffer[0] = 0x00;
 8000546:	4b02      	ldr	r3, [pc, #8]	; (8000550 <main+0x84>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
	  if(receivebuffer[0] != 0x00) {
 800054c:	e7c9      	b.n	80004e2 <main+0x16>
 800054e:	bf00      	nop
 8000550:	2000011c 	.word	0x2000011c
 8000554:	20000119 	.word	0x20000119
 8000558:	40020800 	.word	0x40020800
 800055c:	40020000 	.word	0x40020000
 8000560:	20000118 	.word	0x20000118

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f006 fcb6 	bl	8006ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b27      	ldr	r3, [pc, #156]	; (800062c <SystemClock_Config+0xc8>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a26      	ldr	r2, [pc, #152]	; (800062c <SystemClock_Config+0xc8>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b24      	ldr	r3, [pc, #144]	; (800062c <SystemClock_Config+0xc8>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <SystemClock_Config+0xcc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a20      	ldr	r2, [pc, #128]	; (8000630 <SystemClock_Config+0xcc>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b1e      	ldr	r3, [pc, #120]	; (8000630 <SystemClock_Config+0xcc>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c0:	2301      	movs	r3, #1
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005d8:	23a8      	movs	r3, #168	; 0xa8
 80005da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005dc:	2302      	movs	r3, #2
 80005de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e0:	2307      	movs	r3, #7
 80005e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e4:	f107 0320 	add.w	r3, r7, #32
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 ff15 	bl	8002418 <HAL_RCC_OscConfig>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005f4:	f000 f880 	bl	80006f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f8:	230f      	movs	r3, #15
 80005fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005fc:	2302      	movs	r3, #2
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000600:	2380      	movs	r3, #128	; 0x80
 8000602:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000608:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	2102      	movs	r1, #2
 8000614:	4618      	mov	r0, r3
 8000616:	f002 f977 	bl	8002908 <HAL_RCC_ClockConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000620:	f000 f86a 	bl	80006f8 <Error_Handler>
  }
}
 8000624:	bf00      	nop
 8000626:	3750      	adds	r7, #80	; 0x50
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40007000 	.word	0x40007000

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	60bb      	str	r3, [r7, #8]
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <MX_GPIO_Init+0xb8>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a26      	ldr	r2, [pc, #152]	; (80006ec <MX_GPIO_Init+0xb8>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b24      	ldr	r3, [pc, #144]	; (80006ec <MX_GPIO_Init+0xb8>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <MX_GPIO_Init+0xb8>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <MX_GPIO_Init+0xb8>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <MX_GPIO_Init+0xb8>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <MX_GPIO_Init+0xb8>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a18      	ldr	r2, [pc, #96]	; (80006ec <MX_GPIO_Init+0xb8>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <MX_GPIO_Init+0xb8>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	4812      	ldr	r0, [pc, #72]	; (80006f0 <MX_GPIO_Init+0xbc>)
 80006a6:	f000 fc21 	bl	8000eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80006aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	4619      	mov	r1, r3
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_GPIO_Init+0xc0>)
 80006c0:	f000 fa60 	bl	8000b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006d6:	f107 030c 	add.w	r3, r7, #12
 80006da:	4619      	mov	r1, r3
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_GPIO_Init+0xbc>)
 80006de:	f000 fa51 	bl	8000b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006e2:	bf00      	nop
 80006e4:	3720      	adds	r7, #32
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020800 	.word	0x40020800
 80006f4:	40020000 	.word	0x40020000

080006f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006fc:	b672      	cpsid	i
}
 80006fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000700:	e7fe      	b.n	8000700 <Error_Handler+0x8>
	...

08000704 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_MspInit+0x4c>)
 8000710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000712:	4a0f      	ldr	r2, [pc, #60]	; (8000750 <HAL_MspInit+0x4c>)
 8000714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000718:	6453      	str	r3, [r2, #68]	; 0x44
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b09      	ldr	r3, [pc, #36]	; (8000750 <HAL_MspInit+0x4c>)
 800072c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072e:	4a08      	ldr	r2, [pc, #32]	; (8000750 <HAL_MspInit+0x4c>)
 8000730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000734:	6413      	str	r3, [r2, #64]	; 0x40
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	370c      	adds	r7, #12
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a0:	f000 f89a 	bl	80008d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <OTG_FS_IRQHandler+0x10>)
 80007ae:	f000 fd06 	bl	80011be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	20001614 	.word	0x20001614

080007bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <SystemInit+0x20>)
 80007c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <SystemInit+0x20>)
 80007c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80007e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000818 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007e4:	480d      	ldr	r0, [pc, #52]	; (800081c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80007e8:	4a0e      	ldr	r2, [pc, #56]	; (8000824 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ec:	e002      	b.n	80007f4 <LoopCopyDataInit>

080007ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007f2:	3304      	adds	r3, #4

080007f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007f8:	d3f9      	bcc.n	80007ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007fa:	4a0b      	ldr	r2, [pc, #44]	; (8000828 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80007fc:	4c0b      	ldr	r4, [pc, #44]	; (800082c <LoopFillZerobss+0x26>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000800:	e001      	b.n	8000806 <LoopFillZerobss>

08000802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000804:	3204      	adds	r2, #4

08000806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000808:	d3fb      	bcc.n	8000802 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800080a:	f7ff ffd7 	bl	80007bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800080e:	f006 fb45 	bl	8006e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000812:	f7ff fe5b 	bl	80004cc <main>
  bx  lr    
 8000816:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000818:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800081c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000820:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000824:	08006f74 	.word	0x08006f74
  ldr r2, =_sbss
 8000828:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800082c:	20001d40 	.word	0x20001d40

08000830 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000830:	e7fe      	b.n	8000830 <ADC_IRQHandler>
	...

08000834 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000838:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_Init+0x40>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_Init+0x40>)
 800083e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000842:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_Init+0x40>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_Init+0x40>)
 800084a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800084e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <HAL_Init+0x40>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a07      	ldr	r2, [pc, #28]	; (8000874 <HAL_Init+0x40>)
 8000856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800085a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800085c:	2003      	movs	r0, #3
 800085e:	f000 f94f 	bl	8000b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000862:	200f      	movs	r0, #15
 8000864:	f000 f808 	bl	8000878 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000868:	f7ff ff4c 	bl	8000704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023c00 	.word	0x40023c00

08000878 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <HAL_InitTick+0x54>)
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_InitTick+0x58>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000892:	fbb2 f3f3 	udiv	r3, r2, r3
 8000896:	4618      	mov	r0, r3
 8000898:	f000 f967 	bl	8000b6a <HAL_SYSTICK_Config>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008a2:	2301      	movs	r3, #1
 80008a4:	e00e      	b.n	80008c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b0f      	cmp	r3, #15
 80008aa:	d80a      	bhi.n	80008c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008ac:	2200      	movs	r2, #0
 80008ae:	6879      	ldr	r1, [r7, #4]
 80008b0:	f04f 30ff 	mov.w	r0, #4294967295
 80008b4:	f000 f92f 	bl	8000b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b8:	4a06      	ldr	r2, [pc, #24]	; (80008d4 <HAL_InitTick+0x5c>)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	e000      	b.n	80008c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008c2:	2301      	movs	r3, #1
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20000000 	.word	0x20000000
 80008d0:	20000008 	.word	0x20000008
 80008d4:	20000004 	.word	0x20000004

080008d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_IncTick+0x20>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	461a      	mov	r2, r3
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x24>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	4a04      	ldr	r2, [pc, #16]	; (80008fc <HAL_IncTick+0x24>)
 80008ea:	6013      	str	r3, [r2, #0]
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000008 	.word	0x20000008
 80008fc:	20000130 	.word	0x20000130

08000900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return uwTick;
 8000904:	4b03      	ldr	r3, [pc, #12]	; (8000914 <HAL_GetTick+0x14>)
 8000906:	681b      	ldr	r3, [r3, #0]
}
 8000908:	4618      	mov	r0, r3
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000130 	.word	0x20000130

08000918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000920:	f7ff ffee 	bl	8000900 <HAL_GetTick>
 8000924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000930:	d005      	beq.n	800093e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <HAL_Delay+0x44>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	4413      	add	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800093e:	bf00      	nop
 8000940:	f7ff ffde 	bl	8000900 <HAL_GetTick>
 8000944:	4602      	mov	r2, r0
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	1ad3      	subs	r3, r2, r3
 800094a:	68fa      	ldr	r2, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d8f7      	bhi.n	8000940 <HAL_Delay+0x28>
  {
  }
}
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000008 	.word	0x20000008

08000960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800098c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	60d3      	str	r3, [r2, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	db0b      	blt.n	80009ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	f003 021f 	and.w	r2, r3, #31
 80009dc:	4907      	ldr	r1, [pc, #28]	; (80009fc <__NVIC_EnableIRQ+0x38>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	095b      	lsrs	r3, r3, #5
 80009e4:	2001      	movs	r0, #1
 80009e6:	fa00 f202 	lsl.w	r2, r0, r2
 80009ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e100 	.word	0xe000e100

08000a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	6039      	str	r1, [r7, #0]
 8000a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	db0a      	blt.n	8000a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	490c      	ldr	r1, [pc, #48]	; (8000a4c <__NVIC_SetPriority+0x4c>)
 8000a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1e:	0112      	lsls	r2, r2, #4
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a28:	e00a      	b.n	8000a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4908      	ldr	r1, [pc, #32]	; (8000a50 <__NVIC_SetPriority+0x50>)
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	f003 030f 	and.w	r3, r3, #15
 8000a36:	3b04      	subs	r3, #4
 8000a38:	0112      	lsls	r2, r2, #4
 8000a3a:	b2d2      	uxtb	r2, r2
 8000a3c:	440b      	add	r3, r1
 8000a3e:	761a      	strb	r2, [r3, #24]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000e100 	.word	0xe000e100
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b089      	sub	sp, #36	; 0x24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	f1c3 0307 	rsb	r3, r3, #7
 8000a6e:	2b04      	cmp	r3, #4
 8000a70:	bf28      	it	cs
 8000a72:	2304      	movcs	r3, #4
 8000a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	d902      	bls.n	8000a84 <NVIC_EncodePriority+0x30>
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	3b03      	subs	r3, #3
 8000a82:	e000      	b.n	8000a86 <NVIC_EncodePriority+0x32>
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a88:	f04f 32ff 	mov.w	r2, #4294967295
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	401a      	ands	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa6:	43d9      	mvns	r1, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aac:	4313      	orrs	r3, r2
         );
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3724      	adds	r7, #36	; 0x24
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000acc:	d301      	bcc.n	8000ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e00f      	b.n	8000af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <SysTick_Config+0x40>)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ada:	210f      	movs	r1, #15
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	f7ff ff8e 	bl	8000a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <SysTick_Config+0x40>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aea:	4b04      	ldr	r3, [pc, #16]	; (8000afc <SysTick_Config+0x40>)
 8000aec:	2207      	movs	r2, #7
 8000aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff29 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b086      	sub	sp, #24
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	60b9      	str	r1, [r7, #8]
 8000b20:	607a      	str	r2, [r7, #4]
 8000b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b28:	f7ff ff3e 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	68b9      	ldr	r1, [r7, #8]
 8000b32:	6978      	ldr	r0, [r7, #20]
 8000b34:	f7ff ff8e 	bl	8000a54 <NVIC_EncodePriority>
 8000b38:	4602      	mov	r2, r0
 8000b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff ff5d 	bl	8000a00 <__NVIC_SetPriority>
}
 8000b46:	bf00      	nop
 8000b48:	3718      	adds	r7, #24
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}

08000b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b082      	sub	sp, #8
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	4603      	mov	r3, r0
 8000b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff31 	bl	80009c4 <__NVIC_EnableIRQ>
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b72:	6878      	ldr	r0, [r7, #4]
 8000b74:	f7ff ffa2 	bl	8000abc <SysTick_Config>
 8000b78:	4603      	mov	r3, r0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b089      	sub	sp, #36	; 0x24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	e16b      	b.n	8000e78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	f040 815a 	bne.w	8000e72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d005      	beq.n	8000bd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d130      	bne.n	8000c38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bdc:	69fb      	ldr	r3, [r7, #28]
 8000bde:	005b      	lsls	r3, r3, #1
 8000be0:	2203      	movs	r2, #3
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	69ba      	ldr	r2, [r7, #24]
 8000bea:	4013      	ands	r3, r2
 8000bec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	69ba      	ldr	r2, [r7, #24]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	091b      	lsrs	r3, r3, #4
 8000c22:	f003 0201 	and.w	r2, r3, #1
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	69ba      	ldr	r2, [r7, #24]
 8000c2e:	4313      	orrs	r3, r2
 8000c30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 0303 	and.w	r3, r3, #3
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d017      	beq.n	8000c74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	2203      	movs	r2, #3
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	43db      	mvns	r3, r3
 8000c56:	69ba      	ldr	r2, [r7, #24]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	689a      	ldr	r2, [r3, #8]
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	69ba      	ldr	r2, [r7, #24]
 8000c72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d123      	bne.n	8000cc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	08da      	lsrs	r2, r3, #3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3208      	adds	r2, #8
 8000c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	220f      	movs	r2, #15
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	691a      	ldr	r2, [r3, #16]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb4:	69ba      	ldr	r2, [r7, #24]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	08da      	lsrs	r2, r3, #3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	3208      	adds	r2, #8
 8000cc2:	69b9      	ldr	r1, [r7, #24]
 8000cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	2203      	movs	r2, #3
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f003 0203 	and.w	r2, r3, #3
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 80b4 	beq.w	8000e72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	4b60      	ldr	r3, [pc, #384]	; (8000e90 <HAL_GPIO_Init+0x30c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a5f      	ldr	r2, [pc, #380]	; (8000e90 <HAL_GPIO_Init+0x30c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b5d      	ldr	r3, [pc, #372]	; (8000e90 <HAL_GPIO_Init+0x30c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	60fb      	str	r3, [r7, #12]
 8000d24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d26:	4a5b      	ldr	r2, [pc, #364]	; (8000e94 <HAL_GPIO_Init+0x310>)
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	089b      	lsrs	r3, r3, #2
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	009b      	lsls	r3, r3, #2
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43db      	mvns	r3, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4013      	ands	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a52      	ldr	r2, [pc, #328]	; (8000e98 <HAL_GPIO_Init+0x314>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d02b      	beq.n	8000daa <HAL_GPIO_Init+0x226>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a51      	ldr	r2, [pc, #324]	; (8000e9c <HAL_GPIO_Init+0x318>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d025      	beq.n	8000da6 <HAL_GPIO_Init+0x222>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a50      	ldr	r2, [pc, #320]	; (8000ea0 <HAL_GPIO_Init+0x31c>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d01f      	beq.n	8000da2 <HAL_GPIO_Init+0x21e>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a4f      	ldr	r2, [pc, #316]	; (8000ea4 <HAL_GPIO_Init+0x320>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d019      	beq.n	8000d9e <HAL_GPIO_Init+0x21a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ea8 <HAL_GPIO_Init+0x324>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d013      	beq.n	8000d9a <HAL_GPIO_Init+0x216>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4d      	ldr	r2, [pc, #308]	; (8000eac <HAL_GPIO_Init+0x328>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00d      	beq.n	8000d96 <HAL_GPIO_Init+0x212>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a4c      	ldr	r2, [pc, #304]	; (8000eb0 <HAL_GPIO_Init+0x32c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d007      	beq.n	8000d92 <HAL_GPIO_Init+0x20e>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a4b      	ldr	r2, [pc, #300]	; (8000eb4 <HAL_GPIO_Init+0x330>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d101      	bne.n	8000d8e <HAL_GPIO_Init+0x20a>
 8000d8a:	2307      	movs	r3, #7
 8000d8c:	e00e      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d8e:	2308      	movs	r3, #8
 8000d90:	e00c      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d92:	2306      	movs	r3, #6
 8000d94:	e00a      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d96:	2305      	movs	r3, #5
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x228>
 8000daa:	2300      	movs	r3, #0
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	f002 0203 	and.w	r2, r2, #3
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	69ba      	ldr	r2, [r7, #24]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	; (8000e94 <HAL_GPIO_Init+0x310>)
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b3b      	ldr	r3, [pc, #236]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	693b      	ldr	r3, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dee:	4a32      	ldr	r2, [pc, #200]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000df0:	69bb      	ldr	r3, [r7, #24]
 8000df2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df4:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4013      	ands	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e18:	4a27      	ldr	r2, [pc, #156]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000e1a:	69bb      	ldr	r3, [r7, #24]
 8000e1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e1e:	4b26      	ldr	r3, [pc, #152]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e42:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e6c:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <HAL_GPIO_Init+0x334>)
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3301      	adds	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	2b0f      	cmp	r3, #15
 8000e7c:	f67f ae90 	bls.w	8000ba0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e80:	bf00      	nop
 8000e82:	bf00      	nop
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40013800 	.word	0x40013800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40020800 	.word	0x40020800
 8000ea4:	40020c00 	.word	0x40020c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40021400 	.word	0x40021400
 8000eb0:	40021800 	.word	0x40021800
 8000eb4:	40021c00 	.word	0x40021c00
 8000eb8:	40013c00 	.word	0x40013c00

08000ebc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	887b      	ldrh	r3, [r7, #2]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	73fb      	strb	r3, [r7, #15]
 8000ed8:	e001      	b.n	8000ede <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eda:	2300      	movs	r3, #0
 8000edc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	807b      	strh	r3, [r7, #2]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000efc:	787b      	ldrb	r3, [r7, #1]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f08:	e003      	b.n	8000f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	041a      	lsls	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	619a      	str	r2, [r3, #24]
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr

08000f1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f20:	b08f      	sub	sp, #60	; 0x3c
 8000f22:	af0a      	add	r7, sp, #40	; 0x28
 8000f24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d101      	bne.n	8000f30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	e10f      	b.n	8001150 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d106      	bne.n	8000f50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f005 fc92 	bl	8006874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 ffd7 	bl	8002f22 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	687e      	ldr	r6, [r7, #4]
 8000f7c:	466d      	mov	r5, sp
 8000f7e:	f106 0410 	add.w	r4, r6, #16
 8000f82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f92:	1d33      	adds	r3, r6, #4
 8000f94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f001 feae 	bl	8002cf8 <USB_CoreInit>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d005      	beq.n	8000fae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e0d0      	b.n	8001150 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 ffc5 	bl	8002f44 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	73fb      	strb	r3, [r7, #15]
 8000fbe:	e04a      	b.n	8001056 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000fc0:	7bfa      	ldrb	r2, [r7, #15]
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	4413      	add	r3, r2
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	440b      	add	r3, r1
 8000fce:	333d      	adds	r3, #61	; 0x3d
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	00db      	lsls	r3, r3, #3
 8000fdc:	4413      	add	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	333c      	adds	r3, #60	; 0x3c
 8000fe4:	7bfa      	ldrb	r2, [r7, #15]
 8000fe6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fe8:	7bfa      	ldrb	r2, [r7, #15]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	b298      	uxth	r0, r3
 8000fee:	6879      	ldr	r1, [r7, #4]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	4413      	add	r3, r2
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	3344      	adds	r3, #68	; 0x44
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001000:	7bfa      	ldrb	r2, [r7, #15]
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	00db      	lsls	r3, r3, #3
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	3340      	adds	r3, #64	; 0x40
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4413      	add	r3, r2
 800101e:	009b      	lsls	r3, r3, #2
 8001020:	440b      	add	r3, r1
 8001022:	3348      	adds	r3, #72	; 0x48
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001028:	7bfa      	ldrb	r2, [r7, #15]
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	334c      	adds	r3, #76	; 0x4c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	4413      	add	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	3354      	adds	r3, #84	; 0x54
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	3301      	adds	r3, #1
 8001054:	73fb      	strb	r3, [r7, #15]
 8001056:	7bfa      	ldrb	r2, [r7, #15]
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3af      	bcc.n	8000fc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e044      	b.n	80010f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	4413      	add	r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001078:	2200      	movs	r2, #0
 800107a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	4413      	add	r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010be:	7bfa      	ldrb	r2, [r7, #15]
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	4413      	add	r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010d4:	7bfa      	ldrb	r2, [r7, #15]
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010ea:	7bfb      	ldrb	r3, [r7, #15]
 80010ec:	3301      	adds	r3, #1
 80010ee:	73fb      	strb	r3, [r7, #15]
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3b5      	bcc.n	8001066 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	687e      	ldr	r6, [r7, #4]
 8001102:	466d      	mov	r5, sp
 8001104:	f106 0410 	add.w	r4, r6, #16
 8001108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001110:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001114:	e885 0003 	stmia.w	r5, {r0, r1}
 8001118:	1d33      	adds	r3, r6, #4
 800111a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f001 ff5d 	bl	8002fdc <USB_DevInit>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d005      	beq.n	8001134 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2202      	movs	r2, #2
 800112c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e00d      	b.n	8001150 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2200      	movs	r2, #0
 8001138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f003 f8ac 	bl	80042a6 <USB_DevDisconnect>

  return HAL_OK;
 800114e:	2300      	movs	r3, #0
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001158 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800116c:	2b01      	cmp	r3, #1
 800116e:	d101      	bne.n	8001174 <HAL_PCD_Start+0x1c>
 8001170:	2302      	movs	r3, #2
 8001172:	e020      	b.n	80011b6 <HAL_PCD_Start+0x5e>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2201      	movs	r2, #1
 8001178:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001180:	2b01      	cmp	r3, #1
 8001182:	d109      	bne.n	8001198 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001188:	2b01      	cmp	r3, #1
 800118a:	d005      	beq.n	8001198 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001190:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f001 feaf 	bl	8002f00 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f003 f85c 	bl	8004264 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011be:	b590      	push	{r4, r7, lr}
 80011c0:	b08d      	sub	sp, #52	; 0x34
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4618      	mov	r0, r3
 80011d6:	f003 f91a 	bl	800440e <USB_GetMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 848a 	bne.w	8001af6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f003 f87e 	bl	80042e8 <USB_ReadInterrupts>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8480 	beq.w	8001af4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f003 f86b 	bl	80042e8 <USB_ReadInterrupts>
 8001212:	4603      	mov	r3, r0
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b02      	cmp	r3, #2
 800121a:	d107      	bne.n	800122c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f002 0202 	and.w	r2, r2, #2
 800122a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f003 f859 	bl	80042e8 <USB_ReadInterrupts>
 8001236:	4603      	mov	r3, r0
 8001238:	f003 0310 	and.w	r3, r3, #16
 800123c:	2b10      	cmp	r3, #16
 800123e:	d161      	bne.n	8001304 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0210 	bic.w	r2, r2, #16
 800124e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001250:	6a3b      	ldr	r3, [r7, #32]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	f003 020f 	and.w	r2, r3, #15
 800125c:	4613      	mov	r3, r2
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	4413      	add	r3, r2
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	4413      	add	r3, r2
 800126c:	3304      	adds	r3, #4
 800126e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	0c5b      	lsrs	r3, r3, #17
 8001274:	f003 030f 	and.w	r3, r3, #15
 8001278:	2b02      	cmp	r3, #2
 800127a:	d124      	bne.n	80012c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800127c:	69ba      	ldr	r2, [r7, #24]
 800127e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d035      	beq.n	80012f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	091b      	lsrs	r3, r3, #4
 8001290:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001296:	b29b      	uxth	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	6a38      	ldr	r0, [r7, #32]
 800129c:	f002 fe90 	bl	8003fc0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ac:	441a      	add	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	6a1a      	ldr	r2, [r3, #32]
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012be:	441a      	add	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	621a      	str	r2, [r3, #32]
 80012c4:	e016      	b.n	80012f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	0c5b      	lsrs	r3, r3, #17
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d110      	bne.n	80012f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80012d8:	2208      	movs	r2, #8
 80012da:	4619      	mov	r1, r3
 80012dc:	6a38      	ldr	r0, [r7, #32]
 80012de:	f002 fe6f 	bl	8003fc0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	6a1a      	ldr	r2, [r3, #32]
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012ee:	441a      	add	r2, r3
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0210 	orr.w	r2, r2, #16
 8001302:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f002 ffed 	bl	80042e8 <USB_ReadInterrupts>
 800130e:	4603      	mov	r3, r0
 8001310:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001314:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001318:	f040 80a7 	bne.w	800146a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 fff2 	bl	800430e <USB_ReadDevAllOutEpInterrupt>
 800132a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800132c:	e099      	b.n	8001462 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800132e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	2b00      	cmp	r3, #0
 8001336:	f000 808e 	beq.w	8001456 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	4611      	mov	r1, r2
 8001344:	4618      	mov	r0, r3
 8001346:	f003 f816 	bl	8004376 <USB_ReadDevOutEPInterrupt>
 800134a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00c      	beq.n	8001370 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	015a      	lsls	r2, r3, #5
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	4413      	add	r3, r2
 800135e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001362:	461a      	mov	r2, r3
 8001364:	2301      	movs	r3, #1
 8001366:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 fec2 	bl	80020f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00c      	beq.n	8001394 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	2308      	movs	r3, #8
 800138a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 ff98 	bl	80022c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0310 	and.w	r3, r3, #16
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2310      	movs	r3, #16
 80013ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d030      	beq.n	800141c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	2b80      	cmp	r3, #128	; 0x80
 80013c4:	d109      	bne.n	80013da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	69fa      	ldr	r2, [r7, #28]
 80013d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80013d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80013da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	78db      	ldrb	r3, [r3, #3]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d108      	bne.n	800140a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	2200      	movs	r2, #0
 80013fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001400:	b2db      	uxtb	r3, r3
 8001402:	4619      	mov	r1, r3
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f005 fb3b 	bl	8006a80 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	015a      	lsls	r2, r3, #5
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	4413      	add	r3, r2
 8001412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001416:	461a      	mov	r2, r3
 8001418:	2302      	movs	r3, #2
 800141a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0320 	and.w	r3, r3, #32
 8001422:	2b00      	cmp	r3, #0
 8001424:	d008      	beq.n	8001438 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	015a      	lsls	r2, r3, #5
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001432:	461a      	mov	r2, r3
 8001434:	2320      	movs	r3, #32
 8001436:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d009      	beq.n	8001456 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001444:	015a      	lsls	r2, r3, #5
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144e:	461a      	mov	r2, r3
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	3301      	adds	r3, #1
 800145a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800145c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800145e:	085b      	lsrs	r3, r3, #1
 8001460:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001464:	2b00      	cmp	r3, #0
 8001466:	f47f af62 	bne.w	800132e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f002 ff3a 	bl	80042e8 <USB_ReadInterrupts>
 8001474:	4603      	mov	r3, r0
 8001476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800147e:	f040 80db 	bne.w	8001638 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f002 ff5b 	bl	8004342 <USB_ReadDevAllInEpInterrupt>
 800148c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001492:	e0cd      	b.n	8001630 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80c2 	beq.w	8001624 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	4611      	mov	r1, r2
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 ff81 	bl	80043b2 <USB_ReadDevInEPInterrupt>
 80014b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d057      	beq.n	800156c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	2201      	movs	r2, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	69f9      	ldr	r1, [r7, #28]
 80014d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014dc:	4013      	ands	r3, r2
 80014de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ec:	461a      	mov	r2, r3
 80014ee:	2301      	movs	r3, #1
 80014f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d132      	bne.n	8001560 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014fe:	4613      	mov	r3, r2
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4413      	add	r3, r2
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	440b      	add	r3, r1
 8001508:	334c      	adds	r3, #76	; 0x4c
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	4413      	add	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3348      	adds	r3, #72	; 0x48
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4419      	add	r1, r3
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4403      	add	r3, r0
 800152e:	334c      	adds	r3, #76	; 0x4c
 8001530:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	2b00      	cmp	r3, #0
 8001536:	d113      	bne.n	8001560 <HAL_PCD_IRQHandler+0x3a2>
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3354      	adds	r3, #84	; 0x54
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d108      	bne.n	8001560 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001558:	461a      	mov	r2, r3
 800155a:	2101      	movs	r1, #1
 800155c:	f002 ff88 	bl	8004470 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	b2db      	uxtb	r3, r3
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f005 fa05 	bl	8006976 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001582:	461a      	mov	r2, r3
 8001584:	2308      	movs	r3, #8
 8001586:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0310 	and.w	r3, r3, #16
 800158e:	2b00      	cmp	r3, #0
 8001590:	d008      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001594:	015a      	lsls	r2, r3, #5
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	4413      	add	r3, r2
 800159a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800159e:	461a      	mov	r2, r3
 80015a0:	2310      	movs	r3, #16
 80015a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	015a      	lsls	r2, r3, #5
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	4413      	add	r3, r2
 80015b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ba:	461a      	mov	r2, r3
 80015bc:	2340      	movs	r3, #64	; 0x40
 80015be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d023      	beq.n	8001612 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015cc:	6a38      	ldr	r0, [r7, #32]
 80015ce:	f001 fe69 	bl	80032a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80015d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d4:	4613      	mov	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4413      	add	r3, r2
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	3338      	adds	r3, #56	; 0x38
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	3304      	adds	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	78db      	ldrb	r3, [r3, #3]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d108      	bne.n	8001600 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2200      	movs	r2, #0
 80015f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f005 fa52 	bl	8006aa4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001602:	015a      	lsls	r2, r3, #5
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	4413      	add	r3, r2
 8001608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800160c:	461a      	mov	r2, r3
 800160e:	2302      	movs	r3, #2
 8001610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001618:	2b00      	cmp	r3, #0
 800161a:	d003      	beq.n	8001624 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800161c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 fcdb 	bl	8001fda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	3301      	adds	r3, #1
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800162a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001632:	2b00      	cmp	r3, #0
 8001634:	f47f af2e 	bne.w	8001494 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f002 fe53 	bl	80042e8 <USB_ReadInterrupts>
 8001642:	4603      	mov	r3, r0
 8001644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800164c:	d122      	bne.n	8001694 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	69fa      	ldr	r2, [r7, #28]
 8001658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001674:	2100      	movs	r1, #0
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 fec2 	bl	8002400 <HAL_PCDEx_LPM_Callback>
 800167c:	e002      	b.n	8001684 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f005 f9f0 	bl	8006a64 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f002 fe25 	bl	80042e8 <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016a8:	d112      	bne.n	80016d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d102      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f005 f9ac 	bl	8006a18 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	695a      	ldr	r2, [r3, #20]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f002 fe07 	bl	80042e8 <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016e4:	f040 80b7 	bne.w	8001856 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f6:	f023 0301 	bic.w	r3, r3, #1
 80016fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2110      	movs	r1, #16
 8001702:	4618      	mov	r0, r3
 8001704:	f001 fdce 	bl	80032a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800170c:	e046      	b.n	800179c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	015a      	lsls	r2, r3, #5
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171a:	461a      	mov	r2, r3
 800171c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001720:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	4413      	add	r3, r2
 800172a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001732:	0151      	lsls	r1, r2, #5
 8001734:	69fa      	ldr	r2, [r7, #28]
 8001736:	440a      	add	r2, r1
 8001738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800173c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001740:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001744:	015a      	lsls	r2, r3, #5
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	4413      	add	r3, r2
 800174a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800174e:	461a      	mov	r2, r3
 8001750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001754:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	4413      	add	r3, r2
 800175e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001766:	0151      	lsls	r1, r2, #5
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	440a      	add	r2, r1
 800176c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001770:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001774:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001778:	015a      	lsls	r2, r3, #5
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	4413      	add	r3, r2
 800177e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001786:	0151      	lsls	r1, r2, #5
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	440a      	add	r2, r1
 800178c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001790:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001794:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	3301      	adds	r3, #1
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d3b3      	bcc.n	800170e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	69fa      	ldr	r2, [r7, #28]
 80017b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d016      	beq.n	80017f0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d2:	f043 030b 	orr.w	r3, r3, #11
 80017d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	69fa      	ldr	r2, [r7, #28]
 80017e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e8:	f043 030b 	orr.w	r3, r3, #11
 80017ec:	6453      	str	r3, [r2, #68]	; 0x44
 80017ee:	e015      	b.n	800181c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	69fa      	ldr	r2, [r7, #28]
 80017fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001802:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001806:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	69fa      	ldr	r2, [r7, #28]
 8001812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001816:	f043 030b 	orr.w	r3, r3, #11
 800181a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	69fa      	ldr	r2, [r7, #28]
 8001826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800182a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800182e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001840:	461a      	mov	r2, r3
 8001842:	f002 fe15 	bl	8004470 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fd44 	bl	80042e8 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186a:	d124      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fdda 	bl	800442a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f001 fd8f 	bl	800339e <USB_GetDevSpeed>
 8001880:	4603      	mov	r3, r0
 8001882:	461a      	mov	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681c      	ldr	r4, [r3, #0]
 800188c:	f001 fa28 	bl	8002ce0 <HAL_RCC_GetHCLKFreq>
 8001890:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001896:	b2db      	uxtb	r3, r3
 8001898:	461a      	mov	r2, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f001 fa8e 	bl	8002dbc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f005 f890 	bl	80069c6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fd14 	bl	80042e8 <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f003 0308 	and.w	r3, r3, #8
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d10a      	bne.n	80018e0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f005 f86d 	bl	80069aa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695a      	ldr	r2, [r3, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f002 0208 	and.w	r2, r2, #8
 80018de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fcff 	bl	80042e8 <USB_ReadInterrupts>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	2b80      	cmp	r3, #128	; 0x80
 80018f2:	d122      	bne.n	800193a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
 8001904:	e014      	b.n	8001930 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001906:	6879      	ldr	r1, [r7, #4]
 8001908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d105      	bne.n	800192a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fb27 	bl	8001f78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	3301      	adds	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001936:	429a      	cmp	r2, r3
 8001938:	d3e5      	bcc.n	8001906 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4618      	mov	r0, r3
 8001940:	f002 fcd2 	bl	80042e8 <USB_ReadInterrupts>
 8001944:	4603      	mov	r3, r0
 8001946:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800194e:	d13b      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001950:	2301      	movs	r3, #1
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
 8001954:	e02b      	b.n	80019ae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	4413      	add	r3, r2
 800195e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196a:	4613      	mov	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	4413      	add	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	440b      	add	r3, r1
 8001974:	3340      	adds	r3, #64	; 0x40
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d115      	bne.n	80019a8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800197c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800197e:	2b00      	cmp	r3, #0
 8001980:	da12      	bge.n	80019a8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	333f      	adds	r3, #63	; 0x3f
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fae8 	bl	8001f78 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	3301      	adds	r3, #1
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d3ce      	bcc.n	8001956 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f002 fc8b 	bl	80042e8 <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019dc:	d155      	bne.n	8001a8a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019de:	2301      	movs	r3, #1
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
 80019e2:	e045      	b.n	8001a70 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	015a      	lsls	r2, r3, #5
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4413      	add	r3, r2
 80019ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f8:	4613      	mov	r3, r2
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4413      	add	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d12e      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da2b      	bge.n	8001a6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001a1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d121      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001a26:	6879      	ldr	r1, [r7, #4]
 8001a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	4413      	add	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	440b      	add	r3, r1
 8001a34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001a44:	6a3b      	ldr	r3, [r7, #32]
 8001a46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a48:	6a3b      	ldr	r3, [r7, #32]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10a      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	69fa      	ldr	r2, [r7, #28]
 8001a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a66:	6053      	str	r3, [r2, #4]
            break;
 8001a68:	e007      	b.n	8001a7a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d3b4      	bcc.n	80019e4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	695a      	ldr	r2, [r3, #20]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f002 fc2a 	bl	80042e8 <USB_ReadInterrupts>
 8001a94:	4603      	mov	r3, r0
 8001a96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9e:	d10a      	bne.n	8001ab6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f005 f811 	bl	8006ac8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f002 fc14 	bl	80042e8 <USB_ReadInterrupts>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	d115      	bne.n	8001af6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f005 f801 	bl	8006ae4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6859      	ldr	r1, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	e000      	b.n	8001af6 <HAL_PCD_IRQHandler+0x938>
      return;
 8001af4:	bf00      	nop
    }
  }
}
 8001af6:	3734      	adds	r7, #52	; 0x34
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd90      	pop	{r4, r7, pc}

08001afc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_PCD_SetAddress+0x1a>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e013      	b.n	8001b3e <HAL_PCD_SetAddress+0x42>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	78fa      	ldrb	r2, [r7, #3]
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f002 fb72 	bl	8004218 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b084      	sub	sp, #16
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	4608      	mov	r0, r1
 8001b50:	4611      	mov	r1, r2
 8001b52:	461a      	mov	r2, r3
 8001b54:	4603      	mov	r3, r0
 8001b56:	70fb      	strb	r3, [r7, #3]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	803b      	strh	r3, [r7, #0]
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b60:	2300      	movs	r3, #0
 8001b62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	da0f      	bge.n	8001b8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b6c:	78fb      	ldrb	r3, [r7, #3]
 8001b6e:	f003 020f 	and.w	r2, r3, #15
 8001b72:	4613      	mov	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4413      	add	r3, r2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	3338      	adds	r3, #56	; 0x38
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	4413      	add	r3, r2
 8001b80:	3304      	adds	r3, #4
 8001b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	705a      	strb	r2, [r3, #1]
 8001b8a:	e00f      	b.n	8001bac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	f003 020f 	and.w	r2, r3, #15
 8001b92:	4613      	mov	r3, r2
 8001b94:	00db      	lsls	r3, r3, #3
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001bb8:	883a      	ldrh	r2, [r7, #0]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	78ba      	ldrb	r2, [r7, #2]
 8001bc2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	785b      	ldrb	r3, [r3, #1]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001bd6:	78bb      	ldrb	r3, [r7, #2]
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d102      	bne.n	8001be2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d101      	bne.n	8001bf0 <HAL_PCD_EP_Open+0xaa>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e00e      	b.n	8001c0e <HAL_PCD_EP_Open+0xc8>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f001 fbf2 	bl	80033e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001c0c:	7afb      	ldrb	r3, [r7, #11]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	da0f      	bge.n	8001c4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	f003 020f 	and.w	r2, r3, #15
 8001c30:	4613      	mov	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	3338      	adds	r3, #56	; 0x38
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3304      	adds	r3, #4
 8001c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	705a      	strb	r2, [r3, #1]
 8001c48:	e00f      	b.n	8001c6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c4a:	78fb      	ldrb	r3, [r7, #3]
 8001c4c:	f003 020f 	and.w	r2, r3, #15
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	4413      	add	r3, r2
 8001c60:	3304      	adds	r3, #4
 8001c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c6a:	78fb      	ldrb	r3, [r7, #3]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d101      	bne.n	8001c84 <HAL_PCD_EP_Close+0x6e>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e00e      	b.n	8001ca2 <HAL_PCD_EP_Close+0x8c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68f9      	ldr	r1, [r7, #12]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f001 fc30 	bl	80034f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cba:	7afb      	ldrb	r3, [r7, #11]
 8001cbc:	f003 020f 	and.w	r2, r3, #15
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	3304      	adds	r3, #4
 8001cd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cec:	7afb      	ldrb	r3, [r7, #11]
 8001cee:	f003 030f 	and.w	r3, r3, #15
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691b      	ldr	r3, [r3, #16]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d06:	7afb      	ldrb	r3, [r7, #11]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	6979      	ldr	r1, [r7, #20]
 8001d1e:	f001 ff0f 	bl	8003b40 <USB_EP0StartXfer>
 8001d22:	e008      	b.n	8001d36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	f001 fcbd 	bl	80036b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d36:	2300      	movs	r3, #0
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3718      	adds	r7, #24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	f003 020f 	and.w	r2, r3, #15
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	603b      	str	r3, [r7, #0]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d80:	7afb      	ldrb	r3, [r7, #11]
 8001d82:	f003 020f 	and.w	r2, r3, #15
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	3338      	adds	r3, #56	; 0x38
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4413      	add	r3, r2
 8001d94:	3304      	adds	r3, #4
 8001d96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	2200      	movs	r2, #0
 8001da8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	2201      	movs	r2, #1
 8001dae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001db0:	7afb      	ldrb	r3, [r7, #11]
 8001db2:	f003 030f 	and.w	r3, r3, #15
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d102      	bne.n	8001dca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 030f 	and.w	r3, r3, #15
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d109      	bne.n	8001de8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	461a      	mov	r2, r3
 8001de0:	6979      	ldr	r1, [r7, #20]
 8001de2:	f001 fead 	bl	8003b40 <USB_EP0StartXfer>
 8001de6:	e008      	b.n	8001dfa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	461a      	mov	r2, r3
 8001df4:	6979      	ldr	r1, [r7, #20]
 8001df6:	f001 fc5b 	bl	80036b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	f003 020f 	and.w	r2, r3, #15
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d901      	bls.n	8001e22 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e050      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	da0f      	bge.n	8001e4a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e2a:	78fb      	ldrb	r3, [r7, #3]
 8001e2c:	f003 020f 	and.w	r2, r3, #15
 8001e30:	4613      	mov	r3, r2
 8001e32:	00db      	lsls	r3, r3, #3
 8001e34:	4413      	add	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	3338      	adds	r3, #56	; 0x38
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	3304      	adds	r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2201      	movs	r2, #1
 8001e46:	705a      	strb	r2, [r3, #1]
 8001e48:	e00d      	b.n	8001e66 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_PCD_EP_SetStall+0x82>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e01e      	b.n	8001ec4 <HAL_PCD_EP_SetStall+0xc0>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 f8eb 	bl	8004070 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9a:	78fb      	ldrb	r3, [r7, #3]
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10a      	bne.n	8001eba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	b2d9      	uxtb	r1, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	f002 fadb 	bl	8004470 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001ed8:	78fb      	ldrb	r3, [r7, #3]
 8001eda:	f003 020f 	and.w	r2, r3, #15
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d901      	bls.n	8001eea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e042      	b.n	8001f70 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001eea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	da0f      	bge.n	8001f12 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ef2:	78fb      	ldrb	r3, [r7, #3]
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	4613      	mov	r3, r2
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	4413      	add	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3338      	adds	r3, #56	; 0x38
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	3304      	adds	r3, #4
 8001f08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	705a      	strb	r2, [r3, #1]
 8001f10:	e00f      	b.n	8001f32 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	3304      	adds	r3, #4
 8001f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	f003 030f 	and.w	r3, r3, #15
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d101      	bne.n	8001f52 <HAL_PCD_EP_ClrStall+0x86>
 8001f4e:	2302      	movs	r3, #2
 8001f50:	e00e      	b.n	8001f70 <HAL_PCD_EP_ClrStall+0xa4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68f9      	ldr	r1, [r7, #12]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f002 f8f3 	bl	800414c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	460b      	mov	r3, r1
 8001f82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	da0c      	bge.n	8001fa6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	f003 020f 	and.w	r2, r3, #15
 8001f92:	4613      	mov	r3, r2
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	3338      	adds	r3, #56	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e00c      	b.n	8001fc0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	4613      	mov	r3, r2
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	3304      	adds	r3, #4
 8001fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68f9      	ldr	r1, [r7, #12]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f001 ff12 	bl	8003df0 <USB_EPStopXfer>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001fd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3710      	adds	r7, #16
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}

08001fda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	b08a      	sub	sp, #40	; 0x28
 8001fde:	af02      	add	r7, sp, #8
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	3338      	adds	r3, #56	; 0x38
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	3304      	adds	r3, #4
 8002000:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	6a1a      	ldr	r2, [r3, #32]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	429a      	cmp	r2, r3
 800200c:	d901      	bls.n	8002012 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e06c      	b.n	80020ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	699a      	ldr	r2, [r3, #24]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	429a      	cmp	r2, r3
 8002026:	d902      	bls.n	800202e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3303      	adds	r3, #3
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002036:	e02b      	b.n	8002090 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	699a      	ldr	r2, [r3, #24]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	429a      	cmp	r2, r3
 800204c:	d902      	bls.n	8002054 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3303      	adds	r3, #3
 8002058:	089b      	lsrs	r3, r3, #2
 800205a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6919      	ldr	r1, [r3, #16]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800206c:	b2db      	uxtb	r3, r3
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	4603      	mov	r3, r0
 8002072:	6978      	ldr	r0, [r7, #20]
 8002074:	f001 ff66 	bl	8003f44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	441a      	add	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6a1a      	ldr	r2, [r3, #32]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	441a      	add	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	015a      	lsls	r2, r3, #5
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4413      	add	r3, r2
 8002098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d809      	bhi.n	80020ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d203      	bcs.n	80020ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1be      	bne.n	8002038 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d811      	bhi.n	80020ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	2201      	movs	r2, #1
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	43db      	mvns	r3, r3
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80020e6:	4013      	ands	r3, r2
 80020e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3720      	adds	r7, #32
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	333c      	adds	r3, #60	; 0x3c
 800210c:	3304      	adds	r3, #4
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d17b      	bne.n	8002222 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d015      	beq.n	8002160 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	4a61      	ldr	r2, [pc, #388]	; (80022bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002138:	4293      	cmp	r3, r2
 800213a:	f240 80b9 	bls.w	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80b3 	beq.w	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	4413      	add	r3, r2
 8002152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002156:	461a      	mov	r2, r3
 8002158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215c:	6093      	str	r3, [r2, #8]
 800215e:	e0a7      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	015a      	lsls	r2, r3, #5
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002176:	461a      	mov	r2, r3
 8002178:	2320      	movs	r3, #32
 800217a:	6093      	str	r3, [r2, #8]
 800217c:	e098      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002184:	2b00      	cmp	r3, #0
 8002186:	f040 8093 	bne.w	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	4a4b      	ldr	r2, [pc, #300]	; (80022bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d90f      	bls.n	80021b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	015a      	lsls	r2, r3, #5
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021a8:	461a      	mov	r2, r3
 80021aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ae:	6093      	str	r3, [r2, #8]
 80021b0:	e07e      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	3304      	adds	r3, #4
 80021c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	69da      	ldr	r2, [r3, #28]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	0159      	lsls	r1, r3, #5
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	1ad2      	subs	r2, r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d114      	bne.n	8002214 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d109      	bne.n	8002206 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021fc:	461a      	mov	r2, r3
 80021fe:	2101      	movs	r1, #1
 8002200:	f002 f936 	bl	8004470 <USB_EP0_OutStart>
 8002204:	e006      	b.n	8002214 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	691a      	ldr	r2, [r3, #16]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	441a      	add	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4619      	mov	r1, r3
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f004 fb90 	bl	8006940 <HAL_PCD_DataOutStageCallback>
 8002220:	e046      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	4a26      	ldr	r2, [pc, #152]	; (80022c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d124      	bne.n	8002274 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00a      	beq.n	800224a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	015a      	lsls	r2, r3, #5
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002240:	461a      	mov	r2, r3
 8002242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002246:	6093      	str	r3, [r2, #8]
 8002248:	e032      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	f003 0320 	and.w	r3, r3, #32
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	015a      	lsls	r2, r3, #5
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002260:	461a      	mov	r2, r3
 8002262:	2320      	movs	r3, #32
 8002264:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f004 fb67 	bl	8006940 <HAL_PCD_DataOutStageCallback>
 8002272:	e01d      	b.n	80022b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d114      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d108      	bne.n	80022a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800229c:	461a      	mov	r2, r3
 800229e:	2100      	movs	r1, #0
 80022a0:	f002 f8e6 	bl	8004470 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4619      	mov	r1, r3
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f004 fb48 	bl	8006940 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	4f54300a 	.word	0x4f54300a
 80022c0:	4f54310a 	.word	0x4f54310a

080022c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	333c      	adds	r3, #60	; 0x3c
 80022dc:	3304      	adds	r3, #4
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	015a      	lsls	r2, r3, #5
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	4413      	add	r3, r2
 80022ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4a15      	ldr	r2, [pc, #84]	; (800234c <PCD_EP_OutSetupPacket_int+0x88>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d90e      	bls.n	8002318 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	015a      	lsls	r2, r3, #5
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4413      	add	r3, r2
 800230c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002310:	461a      	mov	r2, r3
 8002312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002316:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f004 faff 	bl	800691c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <PCD_EP_OutSetupPacket_int+0x88>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d90c      	bls.n	8002340 <PCD_EP_OutSetupPacket_int+0x7c>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6818      	ldr	r0, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002338:	461a      	mov	r2, r3
 800233a:	2101      	movs	r1, #1
 800233c:	f002 f898 	bl	8004470 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	4f54300a 	.word	0x4f54300a

08002350 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
 800235c:	4613      	mov	r3, r2
 800235e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	0419      	lsls	r1, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	430a      	orrs	r2, r1
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
 800237c:	e028      	b.n	80023d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e00d      	b.n	80023ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3340      	adds	r3, #64	; 0x40
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3ec      	bcc.n	8002392 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023b8:	883b      	ldrh	r3, [r7, #0]
 80023ba:	0418      	lsls	r0, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4302      	orrs	r2, r0
 80023c8:	3340      	adds	r3, #64	; 0x40
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e267      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d075      	beq.n	8002522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002436:	4b88      	ldr	r3, [pc, #544]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 030c 	and.w	r3, r3, #12
 800243e:	2b04      	cmp	r3, #4
 8002440:	d00c      	beq.n	800245c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002442:	4b85      	ldr	r3, [pc, #532]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800244a:	2b08      	cmp	r3, #8
 800244c:	d112      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800244e:	4b82      	ldr	r3, [pc, #520]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245a:	d10b      	bne.n	8002474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	4b7e      	ldr	r3, [pc, #504]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d05b      	beq.n	8002520 <HAL_RCC_OscConfig+0x108>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d157      	bne.n	8002520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e242      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800247c:	d106      	bne.n	800248c <HAL_RCC_OscConfig+0x74>
 800247e:	4b76      	ldr	r3, [pc, #472]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a75      	ldr	r2, [pc, #468]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e01d      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002494:	d10c      	bne.n	80024b0 <HAL_RCC_OscConfig+0x98>
 8002496:	4b70      	ldr	r3, [pc, #448]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a6f      	ldr	r2, [pc, #444]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800249c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b6d      	ldr	r3, [pc, #436]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a6c      	ldr	r2, [pc, #432]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 80024ae:	e00b      	b.n	80024c8 <HAL_RCC_OscConfig+0xb0>
 80024b0:	4b69      	ldr	r3, [pc, #420]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a68      	ldr	r2, [pc, #416]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024ba:	6013      	str	r3, [r2, #0]
 80024bc:	4b66      	ldr	r3, [pc, #408]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a65      	ldr	r2, [pc, #404]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d013      	beq.n	80024f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fa16 	bl	8000900 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024d8:	f7fe fa12 	bl	8000900 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b64      	cmp	r3, #100	; 0x64
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e207      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ea:	4b5b      	ldr	r3, [pc, #364]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0xc0>
 80024f6:	e014      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fa02 	bl	8000900 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002500:	f7fe f9fe 	bl	8000900 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	; 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e1f3      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002512:	4b51      	ldr	r3, [pc, #324]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1f0      	bne.n	8002500 <HAL_RCC_OscConfig+0xe8>
 800251e:	e000      	b.n	8002522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d063      	beq.n	80025f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800252e:	4b4a      	ldr	r3, [pc, #296]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800253a:	4b47      	ldr	r3, [pc, #284]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002542:	2b08      	cmp	r3, #8
 8002544:	d11c      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002546:	4b44      	ldr	r3, [pc, #272]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d116      	bne.n	8002580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002552:	4b41      	ldr	r3, [pc, #260]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d001      	beq.n	800256a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e1c7      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b3b      	ldr	r3, [pc, #236]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	4937      	ldr	r1, [pc, #220]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800257e:	e03a      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d020      	beq.n	80025ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002588:	4b34      	ldr	r3, [pc, #208]	; (800265c <HAL_RCC_OscConfig+0x244>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f7fe f9b7 	bl	8000900 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002596:	f7fe f9b3 	bl	8000900 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e1a8      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a8:	4b2b      	ldr	r3, [pc, #172]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	00db      	lsls	r3, r3, #3
 80025c2:	4925      	ldr	r1, [pc, #148]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	600b      	str	r3, [r1, #0]
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <HAL_RCC_OscConfig+0x244>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe f996 	bl	8000900 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025d8:	f7fe f992 	bl	8000900 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e187      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d036      	beq.n	8002670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d016      	beq.n	8002638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <HAL_RCC_OscConfig+0x248>)
 800260c:	2201      	movs	r2, #1
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002610:	f7fe f976 	bl	8000900 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002618:	f7fe f972 	bl	8000900 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e167      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x240>)
 800262c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0f0      	beq.n	8002618 <HAL_RCC_OscConfig+0x200>
 8002636:	e01b      	b.n	8002670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <HAL_RCC_OscConfig+0x248>)
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263e:	f7fe f95f 	bl	8000900 <HAL_GetTick>
 8002642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	e00e      	b.n	8002664 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002646:	f7fe f95b 	bl	8000900 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d907      	bls.n	8002664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e150      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
 8002658:	40023800 	.word	0x40023800
 800265c:	42470000 	.word	0x42470000
 8002660:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002664:	4b88      	ldr	r3, [pc, #544]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ea      	bne.n	8002646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 8097 	beq.w	80027ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10f      	bne.n	80026ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	60bb      	str	r3, [r7, #8]
 8002692:	4b7d      	ldr	r3, [pc, #500]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a7c      	ldr	r2, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b7a      	ldr	r3, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	2301      	movs	r3, #1
 80026ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ae:	4b77      	ldr	r3, [pc, #476]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d118      	bne.n	80026ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026ba:	4b74      	ldr	r3, [pc, #464]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a73      	ldr	r2, [pc, #460]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026c6:	f7fe f91b 	bl	8000900 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ce:	f7fe f917 	bl	8000900 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e10c      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_OscConfig+0x474>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0f0      	beq.n	80026ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <HAL_RCC_OscConfig+0x2ea>
 80026f4:	4b64      	ldr	r3, [pc, #400]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	4a63      	ldr	r2, [pc, #396]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x324>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b05      	cmp	r3, #5
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x30c>
 800270a:	4b5f      	ldr	r3, [pc, #380]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800270c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270e:	4a5e      	ldr	r2, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	6713      	str	r3, [r2, #112]	; 0x70
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271a:	4a5b      	ldr	r2, [pc, #364]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6713      	str	r3, [r2, #112]	; 0x70
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0x324>
 8002724:	4b58      	ldr	r3, [pc, #352]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	4a57      	ldr	r2, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800272a:	f023 0301 	bic.w	r3, r3, #1
 800272e:	6713      	str	r3, [r2, #112]	; 0x70
 8002730:	4b55      	ldr	r3, [pc, #340]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002734:	4a54      	ldr	r2, [pc, #336]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d015      	beq.n	8002770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002744:	f7fe f8dc 	bl	8000900 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274a:	e00a      	b.n	8002762 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274c:	f7fe f8d8 	bl	8000900 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	f241 3288 	movw	r2, #5000	; 0x1388
 800275a:	4293      	cmp	r3, r2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0cb      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002762:	4b49      	ldr	r3, [pc, #292]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0ee      	beq.n	800274c <HAL_RCC_OscConfig+0x334>
 800276e:	e014      	b.n	800279a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002770:	f7fe f8c6 	bl	8000900 <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002776:	e00a      	b.n	800278e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002778:	f7fe f8c2 	bl	8000900 <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	4293      	cmp	r3, r2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e0b5      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800278e:	4b3e      	ldr	r3, [pc, #248]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ee      	bne.n	8002778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a0:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	4a38      	ldr	r2, [pc, #224]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 80a1 	beq.w	80028f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b6:	4b34      	ldr	r3, [pc, #208]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 030c 	and.w	r3, r3, #12
 80027be:	2b08      	cmp	r3, #8
 80027c0:	d05c      	beq.n	800287c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d141      	bne.n	800284e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCC_OscConfig+0x478>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d0:	f7fe f896 	bl	8000900 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d8:	f7fe f892 	bl	8000900 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e087      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ea:	4b27      	ldr	r3, [pc, #156]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1f0      	bne.n	80027d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69da      	ldr	r2, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	085b      	lsrs	r3, r3, #1
 800280e:	3b01      	subs	r3, #1
 8002810:	041b      	lsls	r3, r3, #16
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002818:	061b      	lsls	r3, r3, #24
 800281a:	491b      	ldr	r1, [pc, #108]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 800281c:	4313      	orrs	r3, r2
 800281e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x478>)
 8002822:	2201      	movs	r2, #1
 8002824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe f86b 	bl	8000900 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282e:	f7fe f867 	bl	8000900 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e05c      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x416>
 800284c:	e054      	b.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284e:	4b10      	ldr	r3, [pc, #64]	; (8002890 <HAL_RCC_OscConfig+0x478>)
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002854:	f7fe f854 	bl	8000900 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285a:	e008      	b.n	800286e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285c:	f7fe f850 	bl	8000900 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	2b02      	cmp	r3, #2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e045      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <HAL_RCC_OscConfig+0x470>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d1f0      	bne.n	800285c <HAL_RCC_OscConfig+0x444>
 800287a:	e03d      	b.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d107      	bne.n	8002894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e038      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
 8002888:	40023800 	.word	0x40023800
 800288c:	40007000 	.word	0x40007000
 8002890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002894:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x4ec>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d028      	beq.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d121      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d11a      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028c4:	4013      	ands	r3, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d111      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	3b01      	subs	r3, #1
 80028de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d107      	bne.n	80028f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0cc      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800291c:	4b68      	ldr	r3, [pc, #416]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d90c      	bls.n	8002944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	b2d2      	uxtb	r2, r2
 8002930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800297e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	4313      	orrs	r3, r2
 8002990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d044      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d119      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d003      	beq.n	80029c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c6:	4b3f      	ldr	r3, [pc, #252]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d6:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e067      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f023 0203 	bic.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	4934      	ldr	r1, [pc, #208]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f8:	f7fd ff82 	bl	8000900 <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a00:	f7fd ff7e 	bl	8000900 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e04f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a16:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f003 020c 	and.w	r2, r3, #12
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d1eb      	bne.n	8002a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a28:	4b25      	ldr	r3, [pc, #148]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0307 	and.w	r3, r3, #7
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d20c      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a36:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fee2 	bl	8000878 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40023c00 	.word	0x40023c00
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	08006f54 	.word	0x08006f54
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ad8:	b094      	sub	sp, #80	; 0x50
 8002ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	647b      	str	r3, [r7, #68]	; 0x44
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aec:	4b79      	ldr	r3, [pc, #484]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	f003 030c 	and.w	r3, r3, #12
 8002af4:	2b08      	cmp	r3, #8
 8002af6:	d00d      	beq.n	8002b14 <HAL_RCC_GetSysClockFreq+0x40>
 8002af8:	2b08      	cmp	r3, #8
 8002afa:	f200 80e1 	bhi.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x34>
 8002b02:	2b04      	cmp	r3, #4
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8002b06:	e0db      	b.n	8002cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b08:	4b73      	ldr	r3, [pc, #460]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b0a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b0c:	e0db      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b0e:	4b73      	ldr	r3, [pc, #460]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8002b10:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b12:	e0d8      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b14:	4b6f      	ldr	r3, [pc, #444]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b1c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b1e:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d063      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2a:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	099b      	lsrs	r3, r3, #6
 8002b30:	2200      	movs	r2, #0
 8002b32:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b34:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8002b3e:	2300      	movs	r3, #0
 8002b40:	637b      	str	r3, [r7, #52]	; 0x34
 8002b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b46:	4622      	mov	r2, r4
 8002b48:	462b      	mov	r3, r5
 8002b4a:	f04f 0000 	mov.w	r0, #0
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	0159      	lsls	r1, r3, #5
 8002b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b58:	0150      	lsls	r0, r2, #5
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4621      	mov	r1, r4
 8002b60:	1a51      	subs	r1, r2, r1
 8002b62:	6139      	str	r1, [r7, #16]
 8002b64:	4629      	mov	r1, r5
 8002b66:	eb63 0301 	sbc.w	r3, r3, r1
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b78:	4659      	mov	r1, fp
 8002b7a:	018b      	lsls	r3, r1, #6
 8002b7c:	4651      	mov	r1, sl
 8002b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b82:	4651      	mov	r1, sl
 8002b84:	018a      	lsls	r2, r1, #6
 8002b86:	4651      	mov	r1, sl
 8002b88:	ebb2 0801 	subs.w	r8, r2, r1
 8002b8c:	4659      	mov	r1, fp
 8002b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b92:	f04f 0200 	mov.w	r2, #0
 8002b96:	f04f 0300 	mov.w	r3, #0
 8002b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ba6:	4690      	mov	r8, r2
 8002ba8:	4699      	mov	r9, r3
 8002baa:	4623      	mov	r3, r4
 8002bac:	eb18 0303 	adds.w	r3, r8, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	eb49 0303 	adc.w	r3, r9, r3
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	024b      	lsls	r3, r1, #9
 8002bca:	4621      	mov	r1, r4
 8002bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd0:	4621      	mov	r1, r4
 8002bd2:	024a      	lsls	r2, r1, #9
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bda:	2200      	movs	r2, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002be4:	f7fd faf0 	bl	80001c8 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bf0:	e058      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf2:	4b38      	ldr	r3, [pc, #224]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	099b      	lsrs	r3, r3, #6
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4611      	mov	r1, r2
 8002bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c02:	623b      	str	r3, [r7, #32]
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
 8002c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c0c:	4642      	mov	r2, r8
 8002c0e:	464b      	mov	r3, r9
 8002c10:	f04f 0000 	mov.w	r0, #0
 8002c14:	f04f 0100 	mov.w	r1, #0
 8002c18:	0159      	lsls	r1, r3, #5
 8002c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c1e:	0150      	lsls	r0, r2, #5
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	4641      	mov	r1, r8
 8002c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c2a:	4649      	mov	r1, r9
 8002c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c44:	ebb2 040a 	subs.w	r4, r2, sl
 8002c48:	eb63 050b 	sbc.w	r5, r3, fp
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	00eb      	lsls	r3, r5, #3
 8002c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c5a:	00e2      	lsls	r2, r4, #3
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	461d      	mov	r5, r3
 8002c60:	4643      	mov	r3, r8
 8002c62:	18e3      	adds	r3, r4, r3
 8002c64:	603b      	str	r3, [r7, #0]
 8002c66:	464b      	mov	r3, r9
 8002c68:	eb45 0303 	adc.w	r3, r5, r3
 8002c6c:	607b      	str	r3, [r7, #4]
 8002c6e:	f04f 0200 	mov.w	r2, #0
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c7a:	4629      	mov	r1, r5
 8002c7c:	028b      	lsls	r3, r1, #10
 8002c7e:	4621      	mov	r1, r4
 8002c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c84:	4621      	mov	r1, r4
 8002c86:	028a      	lsls	r2, r1, #10
 8002c88:	4610      	mov	r0, r2
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	2200      	movs	r2, #0
 8002c90:	61bb      	str	r3, [r7, #24]
 8002c92:	61fa      	str	r2, [r7, #28]
 8002c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c98:	f7fd fa96 	bl	80001c8 <__aeabi_uldivmod>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002cb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002cc2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3750      	adds	r7, #80	; 0x50
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	00f42400 	.word	0x00f42400
 8002cdc:	007a1200 	.word	0x007a1200

08002ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000000 	.word	0x20000000

08002cf8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
 8002d02:	f107 001c 	add.w	r0, r7, #28
 8002d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d122      	bne.n	8002d56 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d105      	bne.n	8002d4a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
 8002d42:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f001 fbee 	bl	800452c <USB_CoreReset>
 8002d50:	4603      	mov	r3, r0
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e01a      	b.n	8002d8c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f001 fbe2 	bl	800452c <USB_CoreReset>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
 8002d7e:	e005      	b.n	8002d8c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d10b      	bne.n	8002daa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f043 0206 	orr.w	r2, r3, #6
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f043 0220 	orr.w	r2, r3, #32
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002db6:	b004      	add	sp, #16
 8002db8:	4770      	bx	lr
	...

08002dbc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b087      	sub	sp, #28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d165      	bne.n	8002e9c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <USB_SetTurnaroundTime+0x11c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d906      	bls.n	8002de6 <USB_SetTurnaroundTime+0x2a>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	4a40      	ldr	r2, [pc, #256]	; (8002edc <USB_SetTurnaroundTime+0x120>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d202      	bcs.n	8002de6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002de0:	230f      	movs	r3, #15
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e062      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	4a3c      	ldr	r2, [pc, #240]	; (8002edc <USB_SetTurnaroundTime+0x120>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d306      	bcc.n	8002dfc <USB_SetTurnaroundTime+0x40>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a3b      	ldr	r2, [pc, #236]	; (8002ee0 <USB_SetTurnaroundTime+0x124>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d202      	bcs.n	8002dfc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002df6:	230e      	movs	r3, #14
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	e057      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	4a38      	ldr	r2, [pc, #224]	; (8002ee0 <USB_SetTurnaroundTime+0x124>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d306      	bcc.n	8002e12 <USB_SetTurnaroundTime+0x56>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4a37      	ldr	r2, [pc, #220]	; (8002ee4 <USB_SetTurnaroundTime+0x128>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d202      	bcs.n	8002e12 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002e0c:	230d      	movs	r3, #13
 8002e0e:	617b      	str	r3, [r7, #20]
 8002e10:	e04c      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <USB_SetTurnaroundTime+0x128>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d306      	bcc.n	8002e28 <USB_SetTurnaroundTime+0x6c>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4a32      	ldr	r2, [pc, #200]	; (8002ee8 <USB_SetTurnaroundTime+0x12c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d802      	bhi.n	8002e28 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002e22:	230c      	movs	r3, #12
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e041      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <USB_SetTurnaroundTime+0x12c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d906      	bls.n	8002e3e <USB_SetTurnaroundTime+0x82>
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4a2e      	ldr	r2, [pc, #184]	; (8002eec <USB_SetTurnaroundTime+0x130>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d802      	bhi.n	8002e3e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002e38:	230b      	movs	r3, #11
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	e036      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <USB_SetTurnaroundTime+0x130>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d906      	bls.n	8002e54 <USB_SetTurnaroundTime+0x98>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <USB_SetTurnaroundTime+0x134>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d802      	bhi.n	8002e54 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002e4e:	230a      	movs	r3, #10
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e02b      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <USB_SetTurnaroundTime+0x134>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d906      	bls.n	8002e6a <USB_SetTurnaroundTime+0xae>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <USB_SetTurnaroundTime+0x138>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d202      	bcs.n	8002e6a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002e64:	2309      	movs	r3, #9
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	e020      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4a21      	ldr	r2, [pc, #132]	; (8002ef4 <USB_SetTurnaroundTime+0x138>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d306      	bcc.n	8002e80 <USB_SetTurnaroundTime+0xc4>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	4a20      	ldr	r2, [pc, #128]	; (8002ef8 <USB_SetTurnaroundTime+0x13c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d802      	bhi.n	8002e80 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	e015      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <USB_SetTurnaroundTime+0x13c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d906      	bls.n	8002e96 <USB_SetTurnaroundTime+0xda>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <USB_SetTurnaroundTime+0x140>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d202      	bcs.n	8002e96 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e90:	2307      	movs	r3, #7
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e00a      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e96:	2306      	movs	r3, #6
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e007      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002ea2:	2309      	movs	r3, #9
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e001      	b.n	8002eac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	029b      	lsls	r3, r3, #10
 8002ec0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	371c      	adds	r7, #28
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	00d8acbf 	.word	0x00d8acbf
 8002edc:	00e4e1c0 	.word	0x00e4e1c0
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	01067380 	.word	0x01067380
 8002ee8:	011a499f 	.word	0x011a499f
 8002eec:	01312cff 	.word	0x01312cff
 8002ef0:	014ca43f 	.word	0x014ca43f
 8002ef4:	016e3600 	.word	0x016e3600
 8002ef8:	01a6ab1f 	.word	0x01a6ab1f
 8002efc:	01e84800 	.word	0x01e84800

08002f00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0201 	bic.w	r2, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d115      	bne.n	8002f92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f72:	2001      	movs	r0, #1
 8002f74:	f7fd fcd0 	bl	8000918 <HAL_Delay>
      ms++;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f001 fa45 	bl	800440e <USB_GetMode>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d01e      	beq.n	8002fc8 <USB_SetCurrentMode+0x84>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b31      	cmp	r3, #49	; 0x31
 8002f8e:	d9f0      	bls.n	8002f72 <USB_SetCurrentMode+0x2e>
 8002f90:	e01a      	b.n	8002fc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d115      	bne.n	8002fc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7fd fcb7 	bl	8000918 <HAL_Delay>
      ms++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3301      	adds	r3, #1
 8002fae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f001 fa2c 	bl	800440e <USB_GetMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <USB_SetCurrentMode+0x84>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2b31      	cmp	r3, #49	; 0x31
 8002fc0:	d9f0      	bls.n	8002fa4 <USB_SetCurrentMode+0x60>
 8002fc2:	e001      	b.n	8002fc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e005      	b.n	8002fd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b32      	cmp	r3, #50	; 0x32
 8002fcc:	d101      	bne.n	8002fd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fdc:	b084      	sub	sp, #16
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	e009      	b.n	8003010 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	3340      	adds	r3, #64	; 0x40
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	2200      	movs	r2, #0
 8003008:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	3301      	adds	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	2b0e      	cmp	r3, #14
 8003014:	d9f2      	bls.n	8002ffc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d11c      	bne.n	8003056 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800302a:	f043 0302 	orr.w	r3, r3, #2
 800302e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003034:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	639a      	str	r2, [r3, #56]	; 0x38
 8003054:	e00b      	b.n	800306e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003074:	461a      	mov	r2, r3
 8003076:	2300      	movs	r3, #0
 8003078:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	4619      	mov	r1, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003088:	461a      	mov	r2, r3
 800308a:	680b      	ldr	r3, [r1, #0]
 800308c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800308e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003090:	2b01      	cmp	r3, #1
 8003092:	d10c      	bne.n	80030ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003096:	2b00      	cmp	r3, #0
 8003098:	d104      	bne.n	80030a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800309a:	2100      	movs	r1, #0
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f965 	bl	800336c <USB_SetDevSpeed>
 80030a2:	e008      	b.n	80030b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030a4:	2101      	movs	r1, #1
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f960 	bl	800336c <USB_SetDevSpeed>
 80030ac:	e003      	b.n	80030b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030ae:	2103      	movs	r1, #3
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f95b 	bl	800336c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030b6:	2110      	movs	r1, #16
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f8f3 	bl	80032a4 <USB_FlushTxFifo>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f91f 	bl	800330c <USB_FlushRxFifo>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	461a      	mov	r2, r3
 80030e0:	2300      	movs	r3, #0
 80030e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ea:	461a      	mov	r2, r3
 80030ec:	2300      	movs	r3, #0
 80030ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030f6:	461a      	mov	r2, r3
 80030f8:	2300      	movs	r3, #0
 80030fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030fc:	2300      	movs	r3, #0
 80030fe:	613b      	str	r3, [r7, #16]
 8003100:	e043      	b.n	800318a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003118:	d118      	bne.n	800314c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800312c:	461a      	mov	r2, r3
 800312e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	e013      	b.n	800315e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e008      	b.n	800315e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800316a:	461a      	mov	r2, r3
 800316c:	2300      	movs	r3, #0
 800316e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317c:	461a      	mov	r2, r3
 800317e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003182:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	3301      	adds	r3, #1
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	429a      	cmp	r2, r3
 8003190:	d3b7      	bcc.n	8003102 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	e043      	b.n	8003220 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ae:	d118      	bne.n	80031e2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	015a      	lsls	r2, r3, #5
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c2:	461a      	mov	r2, r3
 80031c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e013      	b.n	80031f4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d8:	461a      	mov	r2, r3
 80031da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	e008      	b.n	80031f4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	2300      	movs	r3, #0
 80031f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003200:	461a      	mov	r2, r3
 8003202:	2300      	movs	r3, #0
 8003204:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003218:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	3301      	adds	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d3b7      	bcc.n	8003198 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003236:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800323a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003248:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800324a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f043 0210 	orr.w	r2, r3, #16
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <USB_DevInit+0x2c4>)
 8003262:	4313      	orrs	r3, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d005      	beq.n	800327a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f043 0208 	orr.w	r2, r3, #8
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800327a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800327c:	2b01      	cmp	r3, #1
 800327e:	d107      	bne.n	8003290 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	699b      	ldr	r3, [r3, #24]
 8003284:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003288:	f043 0304 	orr.w	r3, r3, #4
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003290:	7dfb      	ldrb	r3, [r7, #23]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800329c:	b004      	add	sp, #16
 800329e:	4770      	bx	lr
 80032a0:	803c3800 	.word	0x803c3800

080032a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3301      	adds	r3, #1
 80032b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4a13      	ldr	r2, [pc, #76]	; (8003308 <USB_FlushTxFifo+0x64>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e01b      	b.n	80032fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	daf2      	bge.n	80032b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80032cc:	2300      	movs	r3, #0
 80032ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	019b      	lsls	r3, r3, #6
 80032d4:	f043 0220 	orr.w	r2, r3, #32
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	3301      	adds	r3, #1
 80032e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a08      	ldr	r2, [pc, #32]	; (8003308 <USB_FlushTxFifo+0x64>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e006      	b.n	80032fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0320 	and.w	r3, r3, #32
 80032f6:	2b20      	cmp	r3, #32
 80032f8:	d0f0      	beq.n	80032dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3714      	adds	r7, #20
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	00030d40 	.word	0x00030d40

0800330c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800330c:	b480      	push	{r7}
 800330e:	b085      	sub	sp, #20
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	3301      	adds	r3, #1
 800331c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <USB_FlushRxFifo+0x5c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e018      	b.n	800335c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	daf2      	bge.n	8003318 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2210      	movs	r2, #16
 800333a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3301      	adds	r3, #1
 8003340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a08      	ldr	r2, [pc, #32]	; (8003368 <USB_FlushRxFifo+0x5c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d901      	bls.n	800334e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e006      	b.n	800335c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f003 0310 	and.w	r3, r3, #16
 8003356:	2b10      	cmp	r3, #16
 8003358:	d0f0      	beq.n	800333c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	00030d40 	.word	0x00030d40

0800336c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	68f9      	ldr	r1, [r7, #12]
 8003388:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800338c:	4313      	orrs	r3, r2
 800338e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr

0800339e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800339e:	b480      	push	{r7}
 80033a0:	b087      	sub	sp, #28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 0306 	and.w	r3, r3, #6
 80033b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d102      	bne.n	80033c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80033be:	2300      	movs	r3, #0
 80033c0:	75fb      	strb	r3, [r7, #23]
 80033c2:	e00a      	b.n	80033da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d002      	beq.n	80033d0 <USB_GetDevSpeed+0x32>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d102      	bne.n	80033d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80033d0:	2302      	movs	r3, #2
 80033d2:	75fb      	strb	r3, [r7, #23]
 80033d4:	e001      	b.n	80033da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80033d6:	230f      	movs	r3, #15
 80033d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80033da:	7dfb      	ldrb	r3, [r7, #23]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	785b      	ldrb	r3, [r3, #1]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d13a      	bne.n	800347a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f003 030f 	and.w	r3, r3, #15
 8003414:	2101      	movs	r1, #1
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	b29b      	uxth	r3, r3
 800341c:	68f9      	ldr	r1, [r7, #12]
 800341e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003422:	4313      	orrs	r3, r2
 8003424:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4413      	add	r3, r2
 800342e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d155      	bne.n	80034e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003458:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	059b      	lsls	r3, r3, #22
 800345e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003460:	4313      	orrs	r3, r2
 8003462:	68ba      	ldr	r2, [r7, #8]
 8003464:	0151      	lsls	r1, r2, #5
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	440a      	add	r2, r1
 800346a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800346e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	e036      	b.n	80034e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	69da      	ldr	r2, [r3, #28]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	2101      	movs	r1, #1
 800348c:	fa01 f303 	lsl.w	r3, r1, r3
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	68f9      	ldr	r1, [r7, #12]
 8003494:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003498:	4313      	orrs	r3, r2
 800349a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d11a      	bne.n	80034e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	791b      	ldrb	r3, [r3, #4]
 80034cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80034ce:	430b      	orrs	r3, r1
 80034d0:	4313      	orrs	r3, r2
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	0151      	lsls	r1, r2, #5
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	440a      	add	r2, r1
 80034da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80034de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3714      	adds	r7, #20
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	785b      	ldrb	r3, [r3, #1]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d161      	bne.n	80035d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	015a      	lsls	r2, r3, #5
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003526:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800352a:	d11f      	bne.n	800356c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	0151      	lsls	r1, r2, #5
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	440a      	add	r2, r1
 8003542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003546:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800354a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	4413      	add	r3, r2
 8003554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	0151      	lsls	r1, r2, #5
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	440a      	add	r2, r1
 8003562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003566:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800356a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	f003 030f 	and.w	r3, r3, #15
 800357c:	2101      	movs	r1, #1
 800357e:	fa01 f303 	lsl.w	r3, r1, r3
 8003582:	b29b      	uxth	r3, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	68f9      	ldr	r1, [r7, #12]
 8003588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800358c:	4013      	ands	r3, r2
 800358e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	2101      	movs	r1, #1
 80035a2:	fa01 f303 	lsl.w	r3, r1, r3
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035b0:	4013      	ands	r3, r2
 80035b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	015a      	lsls	r2, r3, #5
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	0159      	lsls	r1, r3, #5
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035ce:	4619      	mov	r1, r3
 80035d0:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <USB_DeactivateEndpoint+0x1b0>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	600b      	str	r3, [r1, #0]
 80035d6:	e060      	b.n	800369a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035ee:	d11f      	bne.n	8003630 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	68fa      	ldr	r2, [r7, #12]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800360a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800360e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	0151      	lsls	r1, r2, #5
 8003622:	68fa      	ldr	r2, [r7, #12]
 8003624:	440a      	add	r2, r1
 8003626:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800362a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800362e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f003 030f 	and.w	r3, r3, #15
 8003640:	2101      	movs	r1, #1
 8003642:	fa01 f303 	lsl.w	r3, r1, r3
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	43db      	mvns	r3, r3
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003650:	4013      	ands	r3, r2
 8003652:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800365a:	69da      	ldr	r2, [r3, #28]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	2101      	movs	r1, #1
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	041b      	lsls	r3, r3, #16
 800366c:	43db      	mvns	r3, r3
 800366e:	68f9      	ldr	r1, [r7, #12]
 8003670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003674:	4013      	ands	r3, r2
 8003676:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4413      	add	r3, r2
 8003680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	0159      	lsls	r1, r3, #5
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	440b      	add	r3, r1
 800368e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003692:	4619      	mov	r1, r3
 8003694:	4b05      	ldr	r3, [pc, #20]	; (80036ac <USB_DeactivateEndpoint+0x1b4>)
 8003696:	4013      	ands	r3, r2
 8003698:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	ec337800 	.word	0xec337800
 80036ac:	eff37800 	.word	0xeff37800

080036b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b08a      	sub	sp, #40	; 0x28
 80036b4:	af02      	add	r7, sp, #8
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	4613      	mov	r3, r2
 80036bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	785b      	ldrb	r3, [r3, #1]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	f040 815c 	bne.w	800398a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d132      	bne.n	8003740 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	69ba      	ldr	r2, [r7, #24]
 80036ea:	0151      	lsls	r1, r2, #5
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	440a      	add	r2, r1
 80036f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	4413      	add	r3, r2
 8003706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	0151      	lsls	r1, r2, #5
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	440a      	add	r2, r1
 8003714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003718:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800371c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	015a      	lsls	r2, r3, #5
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	4413      	add	r3, r2
 8003726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	0151      	lsls	r1, r2, #5
 8003730:	69fa      	ldr	r2, [r7, #28]
 8003732:	440a      	add	r2, r1
 8003734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003738:	0cdb      	lsrs	r3, r3, #19
 800373a:	04db      	lsls	r3, r3, #19
 800373c:	6113      	str	r3, [r2, #16]
 800373e:	e074      	b.n	800382a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	69fa      	ldr	r2, [r7, #28]
 8003754:	440a      	add	r2, r1
 8003756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800375a:	0cdb      	lsrs	r3, r3, #19
 800375c:	04db      	lsls	r3, r3, #19
 800375e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	69fa      	ldr	r2, [r7, #28]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800377a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800377e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003790:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	6999      	ldr	r1, [r3, #24]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	440b      	add	r3, r1
 800379c:	1e59      	subs	r1, r3, #1
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80037a8:	4b9d      	ldr	r3, [pc, #628]	; (8003a20 <USB_EPStartXfer+0x370>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	69b9      	ldr	r1, [r7, #24]
 80037ae:	0148      	lsls	r0, r1, #5
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	4401      	add	r1, r0
 80037b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037b8:	4313      	orrs	r3, r2
 80037ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	0148      	lsls	r0, r1, #5
 80037d6:	69f9      	ldr	r1, [r7, #28]
 80037d8:	4401      	add	r1, r0
 80037da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80037de:	4313      	orrs	r3, r2
 80037e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	791b      	ldrb	r3, [r3, #4]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d11f      	bne.n	800382a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	015a      	lsls	r2, r3, #5
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	0151      	lsls	r1, r2, #5
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	440a      	add	r2, r1
 8003800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003804:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003808:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	015a      	lsls	r2, r3, #5
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	4413      	add	r3, r2
 8003812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003816:	691b      	ldr	r3, [r3, #16]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	0151      	lsls	r1, r2, #5
 800381c:	69fa      	ldr	r2, [r7, #28]
 800381e:	440a      	add	r2, r1
 8003820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003828:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d14b      	bne.n	80038c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d009      	beq.n	800384c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	015a      	lsls	r2, r3, #5
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	4413      	add	r3, r2
 8003840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003844:	461a      	mov	r2, r3
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	791b      	ldrb	r3, [r3, #4]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d128      	bne.n	80038a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d110      	bne.n	8003886 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	015a      	lsls	r2, r3, #5
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	4413      	add	r3, r2
 800386c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	0151      	lsls	r1, r2, #5
 8003876:	69fa      	ldr	r2, [r7, #28]
 8003878:	440a      	add	r2, r1
 800387a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800387e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e00f      	b.n	80038a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	015a      	lsls	r2, r3, #5
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	4413      	add	r3, r2
 800388e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	69ba      	ldr	r2, [r7, #24]
 8003896:	0151      	lsls	r1, r2, #5
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	440a      	add	r2, r1
 800389c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	0151      	lsls	r1, r2, #5
 80038b8:	69fa      	ldr	r2, [r7, #28]
 80038ba:	440a      	add	r2, r1
 80038bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e133      	b.n	8003b30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	0151      	lsls	r1, r2, #5
 80038da:	69fa      	ldr	r2, [r7, #28]
 80038dc:	440a      	add	r2, r1
 80038de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	791b      	ldrb	r3, [r3, #4]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d015      	beq.n	800391c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 811b 	beq.w	8003b30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f303 	lsl.w	r3, r1, r3
 8003910:	69f9      	ldr	r1, [r7, #28]
 8003912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003916:	4313      	orrs	r3, r2
 8003918:	634b      	str	r3, [r1, #52]	; 0x34
 800391a:	e109      	b.n	8003b30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d110      	bne.n	800394e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	0151      	lsls	r1, r2, #5
 800393e:	69fa      	ldr	r2, [r7, #28]
 8003940:	440a      	add	r2, r1
 8003942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	e00f      	b.n	800396e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	0151      	lsls	r1, r2, #5
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	440a      	add	r2, r1
 8003964:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	6919      	ldr	r1, [r3, #16]
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	b298      	uxth	r0, r3
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4603      	mov	r3, r0
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 fade 	bl	8003f44 <USB_WritePacket>
 8003988:	e0d2      	b.n	8003b30 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a4:	0cdb      	lsrs	r3, r3, #19
 80039a6:	04db      	lsls	r3, r3, #19
 80039a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d126      	bne.n	8003a24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	0148      	lsls	r0, r1, #5
 80039f0:	69f9      	ldr	r1, [r7, #28]
 80039f2:	4401      	add	r1, r0
 80039f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f8:	4313      	orrs	r3, r2
 80039fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a1a:	6113      	str	r3, [r2, #16]
 8003a1c:	e03a      	b.n	8003a94 <USB_EPStartXfer+0x3e4>
 8003a1e:	bf00      	nop
 8003a20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699a      	ldr	r2, [r3, #24]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	1e5a      	subs	r2, r3, #1
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a38:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	8afa      	ldrh	r2, [r7, #22]
 8003a40:	fb03 f202 	mul.w	r2, r3, r2
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	691a      	ldr	r2, [r3, #16]
 8003a56:	8afb      	ldrh	r3, [r7, #22]
 8003a58:	04d9      	lsls	r1, r3, #19
 8003a5a:	4b38      	ldr	r3, [pc, #224]	; (8003b3c <USB_EPStartXfer+0x48c>)
 8003a5c:	400b      	ands	r3, r1
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	0148      	lsls	r0, r1, #5
 8003a62:	69f9      	ldr	r1, [r7, #28]
 8003a64:	4401      	add	r1, r0
 8003a66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	69db      	ldr	r3, [r3, #28]
 8003a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	0148      	lsls	r0, r1, #5
 8003a88:	69f9      	ldr	r1, [r7, #28]
 8003a8a:	4401      	add	r1, r0
 8003a8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a90:	4313      	orrs	r3, r2
 8003a92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d10d      	bne.n	8003ab6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab2:	460a      	mov	r2, r1
 8003ab4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	791b      	ldrb	r3, [r3, #4]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d128      	bne.n	8003b10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d110      	bne.n	8003af0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	e00f      	b.n	8003b10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	0151      	lsls	r1, r2, #5
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	440a      	add	r2, r1
 8003b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	015a      	lsls	r2, r3, #5
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	4413      	add	r3, r2
 8003b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	0151      	lsls	r1, r2, #5
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	440a      	add	r2, r1
 8003b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	1ff80000 	.word	0x1ff80000

08003b40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b087      	sub	sp, #28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	785b      	ldrb	r3, [r3, #1]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 80ce 	bne.w	8003cfe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	699b      	ldr	r3, [r3, #24]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d132      	bne.n	8003bd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	0151      	lsls	r1, r2, #5
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	440a      	add	r2, r1
 8003b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	0151      	lsls	r1, r2, #5
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	440a      	add	r2, r1
 8003ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	015a      	lsls	r2, r3, #5
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	0151      	lsls	r1, r2, #5
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bc8:	0cdb      	lsrs	r3, r3, #19
 8003bca:	04db      	lsls	r3, r3, #19
 8003bcc:	6113      	str	r3, [r2, #16]
 8003bce:	e04e      	b.n	8003c6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	0151      	lsls	r1, r2, #5
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	440a      	add	r2, r1
 8003be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bea:	0cdb      	lsrs	r3, r3, #19
 8003bec:	04db      	lsls	r3, r3, #19
 8003bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	0151      	lsls	r1, r2, #5
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	440a      	add	r2, r1
 8003c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d903      	bls.n	8003c28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c5e:	6939      	ldr	r1, [r7, #16]
 8003c60:	0148      	lsls	r0, r1, #5
 8003c62:	6979      	ldr	r1, [r7, #20]
 8003c64:	4401      	add	r1, r0
 8003c66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d11e      	bne.n	8003cb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	015a      	lsls	r2, r3, #5
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4413      	add	r3, r2
 8003c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c88:	461a      	mov	r2, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003caa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e097      	b.n	8003de2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	f000 8083 	beq.w	8003de2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f003 030f 	and.w	r3, r3, #15
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	6979      	ldr	r1, [r7, #20]
 8003cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	634b      	str	r3, [r1, #52]	; 0x34
 8003cfc:	e071      	b.n	8003de2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	015a      	lsls	r2, r3, #5
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	4413      	add	r3, r2
 8003d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	0151      	lsls	r1, r2, #5
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	440a      	add	r2, r1
 8003d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d18:	0cdb      	lsrs	r3, r3, #19
 8003d1a:	04db      	lsls	r3, r3, #19
 8003d1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	0151      	lsls	r1, r2, #5
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	440a      	add	r2, r1
 8003d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d003      	beq.n	8003d52 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	015a      	lsls	r2, r3, #5
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4413      	add	r3, r2
 8003d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d86:	691a      	ldr	r2, [r3, #16]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d90:	6939      	ldr	r1, [r7, #16]
 8003d92:	0148      	lsls	r0, r1, #5
 8003d94:	6979      	ldr	r1, [r7, #20]
 8003d96:	4401      	add	r1, r0
 8003d98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d10d      	bne.n	8003dc2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d009      	beq.n	8003dc2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	6919      	ldr	r1, [r3, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	015a      	lsls	r2, r3, #5
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	4413      	add	r3, r2
 8003dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbe:	460a      	mov	r2, r1
 8003dc0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ddc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003de0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	785b      	ldrb	r3, [r3, #1]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d14a      	bne.n	8003ea4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e26:	f040 8086 	bne.w	8003f36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	7812      	ldrb	r2, [r2, #0]
 8003e3e:	0151      	lsls	r1, r2, #5
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	440a      	add	r2, r1
 8003e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	7812      	ldrb	r2, [r2, #0]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	3301      	adds	r3, #1
 8003e76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d902      	bls.n	8003e88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	75fb      	strb	r3, [r7, #23]
          break;
 8003e86:	e056      	b.n	8003f36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ea0:	d0e7      	beq.n	8003e72 <USB_EPStopXfer+0x82>
 8003ea2:	e048      	b.n	8003f36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ebc:	d13b      	bne.n	8003f36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	7812      	ldrb	r2, [r2, #0]
 8003ed2:	0151      	lsls	r1, r2, #5
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	440a      	add	r2, r1
 8003ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003edc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ee0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	7812      	ldrb	r2, [r2, #0]
 8003ef6:	0151      	lsls	r1, r2, #5
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	440a      	add	r2, r1
 8003efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d902      	bls.n	8003f1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
          break;
 8003f1a:	e00c      	b.n	8003f36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f34:	d0e7      	beq.n	8003f06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003f36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b089      	sub	sp, #36	; 0x24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	4611      	mov	r1, r2
 8003f50:	461a      	mov	r2, r3
 8003f52:	460b      	mov	r3, r1
 8003f54:	71fb      	strb	r3, [r7, #7]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003f62:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d123      	bne.n	8003fb2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f6a:	88bb      	ldrh	r3, [r7, #4]
 8003f6c:	3303      	adds	r3, #3
 8003f6e:	089b      	lsrs	r3, r3, #2
 8003f70:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e018      	b.n	8003faa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f78:	79fb      	ldrb	r3, [r7, #7]
 8003f7a:	031a      	lsls	r2, r3, #12
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f84:	461a      	mov	r2, r3
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3301      	adds	r3, #1
 8003f96:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d3e2      	bcc.n	8003f78 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3724      	adds	r7, #36	; 0x24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b08b      	sub	sp, #44	; 0x2c
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003fd6:	88fb      	ldrh	r3, [r7, #6]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	e014      	b.n	8004016 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	3301      	adds	r3, #1
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	3301      	adds	r3, #1
 8004008:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	3301      	adds	r3, #1
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	3301      	adds	r3, #1
 8004014:	623b      	str	r3, [r7, #32]
 8004016:	6a3a      	ldr	r2, [r7, #32]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	429a      	cmp	r2, r3
 800401c:	d3e6      	bcc.n	8003fec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800401e:	8bfb      	ldrh	r3, [r7, #30]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01e      	beq.n	8004062 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800402e:	461a      	mov	r2, r3
 8004030:	f107 0310 	add.w	r3, r7, #16
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	b2db      	uxtb	r3, r3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	fa22 f303 	lsr.w	r3, r2, r3
 8004044:	b2da      	uxtb	r2, r3
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	701a      	strb	r2, [r3, #0]
      i++;
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	3301      	adds	r3, #1
 800404e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	3301      	adds	r3, #1
 8004054:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004056:	8bfb      	ldrh	r3, [r7, #30]
 8004058:	3b01      	subs	r3, #1
 800405a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800405c:	8bfb      	ldrh	r3, [r7, #30]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1ea      	bne.n	8004038 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004064:	4618      	mov	r0, r3
 8004066:	372c      	adds	r7, #44	; 0x2c
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d12c      	bne.n	80040e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	db12      	blt.n	80040c4 <USB_EPSetStall+0x54>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00f      	beq.n	80040c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68ba      	ldr	r2, [r7, #8]
 80040d4:	0151      	lsls	r1, r2, #5
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	440a      	add	r2, r1
 80040da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040e2:	6013      	str	r3, [r2, #0]
 80040e4:	e02b      	b.n	800413e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	db12      	blt.n	800411e <USB_EPSetStall+0xae>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00f      	beq.n	800411e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	0151      	lsls	r1, r2, #5
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	440a      	add	r2, r1
 8004114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004118:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800411c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	015a      	lsls	r2, r3, #5
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4413      	add	r3, r2
 8004126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	0151      	lsls	r1, r2, #5
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	440a      	add	r2, r1
 8004134:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004138:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800413c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	785b      	ldrb	r3, [r3, #1]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d128      	bne.n	80041ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004182:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004186:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	791b      	ldrb	r3, [r3, #4]
 800418c:	2b03      	cmp	r3, #3
 800418e:	d003      	beq.n	8004198 <USB_EPClearStall+0x4c>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	2b02      	cmp	r3, #2
 8004196:	d138      	bne.n	800420a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6013      	str	r3, [r2, #0]
 80041b8:	e027      	b.n	800420a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	0151      	lsls	r1, r2, #5
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	440a      	add	r2, r1
 80041d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	791b      	ldrb	r3, [r3, #4]
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d003      	beq.n	80041ea <USB_EPClearStall+0x9e>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	791b      	ldrb	r3, [r3, #4]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d10f      	bne.n	800420a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	015a      	lsls	r2, r3, #5
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	4413      	add	r3, r2
 80041f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	0151      	lsls	r1, r2, #5
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	440a      	add	r2, r1
 8004200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004208:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004236:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800423a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	78fb      	ldrb	r3, [r7, #3]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800424c:	68f9      	ldr	r1, [r7, #12]
 800424e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004252:	4313      	orrs	r3, r2
 8004254:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800427e:	f023 0303 	bic.w	r3, r3, #3
 8004282:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004292:	f023 0302 	bic.w	r3, r3, #2
 8004296:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80042a6:	b480      	push	{r7}
 80042a8:	b085      	sub	sp, #20
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80042c0:	f023 0303 	bic.w	r3, r3, #3
 80042c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d4:	f043 0302 	orr.w	r3, r3, #2
 80042d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80042da:	2300      	movs	r3, #0
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3714      	adds	r7, #20
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b085      	sub	sp, #20
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004300:	68fb      	ldr	r3, [r7, #12]
}
 8004302:	4618      	mov	r0, r3
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	0c1b      	lsrs	r3, r3, #16
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004342:	b480      	push	{r7}
 8004344:	b085      	sub	sp, #20
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4013      	ands	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	b29b      	uxth	r3, r3
}
 800436a:	4618      	mov	r0, r3
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr

08004376 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004376:	b480      	push	{r7}
 8004378:	b085      	sub	sp, #20
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	015a      	lsls	r2, r3, #5
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4413      	add	r3, r2
 800438e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	4013      	ands	r3, r2
 80043a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80043a4:	68bb      	ldr	r3, [r7, #8]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b087      	sub	sp, #28
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80043d6:	78fb      	ldrb	r3, [r7, #3]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	01db      	lsls	r3, r3, #7
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	693a      	ldr	r2, [r7, #16]
 80043fc:	4013      	ands	r3, r2
 80043fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004400:	68bb      	ldr	r3, [r7, #8]
}
 8004402:	4618      	mov	r0, r3
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f003 0301 	and.w	r3, r3, #1
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800442a:	b480      	push	{r7}
 800442c:	b085      	sub	sp, #20
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004448:	f023 0307 	bic.w	r3, r3, #7
 800444c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800445c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004460:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004470:	b480      	push	{r7}
 8004472:	b087      	sub	sp, #28
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	460b      	mov	r3, r1
 800447a:	607a      	str	r2, [r7, #4]
 800447c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	333c      	adds	r3, #60	; 0x3c
 8004486:	3304      	adds	r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	4a26      	ldr	r2, [pc, #152]	; (8004528 <USB_EP0_OutStart+0xb8>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d90a      	bls.n	80044aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a4:	d101      	bne.n	80044aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	e037      	b.n	800451a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b0:	461a      	mov	r2, r3
 80044b2:	2300      	movs	r3, #0
 80044b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044d8:	f043 0318 	orr.w	r3, r3, #24
 80044dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80044f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80044f2:	7afb      	ldrb	r3, [r7, #11]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d10f      	bne.n	8004518 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fe:	461a      	mov	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004512:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004516:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	371c      	adds	r7, #28
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	4f54300a 	.word	0x4f54300a

0800452c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	3301      	adds	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	4a13      	ldr	r2, [pc, #76]	; (8004590 <USB_CoreReset+0x64>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d901      	bls.n	800454a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e01b      	b.n	8004582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	daf2      	bge.n	8004538 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f043 0201 	orr.w	r2, r3, #1
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	3301      	adds	r3, #1
 8004566:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	4a09      	ldr	r2, [pc, #36]	; (8004590 <USB_CoreReset+0x64>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d901      	bls.n	8004574 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e006      	b.n	8004582 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b01      	cmp	r3, #1
 800457e:	d0f0      	beq.n	8004562 <USB_CoreReset+0x36>

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	00030d40 	.word	0x00030d40

08004594 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80045a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80045a4:	f002 fc36 	bl	8006e14 <USBD_static_malloc>
 80045a8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	32b0      	adds	r2, #176	; 0xb0
 80045ba:	2100      	movs	r1, #0
 80045bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80045c0:	2302      	movs	r3, #2
 80045c2:	e0d4      	b.n	800476e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80045c4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80045c8:	2100      	movs	r1, #0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f002 fc8a 	bl	8006ee4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	32b0      	adds	r2, #176	; 0xb0
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	32b0      	adds	r2, #176	; 0xb0
 80045ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	7c1b      	ldrb	r3, [r3, #16]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d138      	bne.n	800466e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80045fc:	4b5e      	ldr	r3, [pc, #376]	; (8004778 <USBD_CDC_Init+0x1e4>)
 80045fe:	7819      	ldrb	r1, [r3, #0]
 8004600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004604:	2202      	movs	r2, #2
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f002 fae1 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800460c:	4b5a      	ldr	r3, [pc, #360]	; (8004778 <USBD_CDC_Init+0x1e4>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	f003 020f 	and.w	r2, r3, #15
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	440b      	add	r3, r1
 8004620:	3324      	adds	r3, #36	; 0x24
 8004622:	2201      	movs	r2, #1
 8004624:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004626:	4b55      	ldr	r3, [pc, #340]	; (800477c <USBD_CDC_Init+0x1e8>)
 8004628:	7819      	ldrb	r1, [r3, #0]
 800462a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800462e:	2202      	movs	r2, #2
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f002 facc 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <USBD_CDC_Init+0x1e8>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	f003 020f 	and.w	r2, r3, #15
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800464e:	2201      	movs	r2, #1
 8004650:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004652:	4b4b      	ldr	r3, [pc, #300]	; (8004780 <USBD_CDC_Init+0x1ec>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	f003 020f 	and.w	r2, r3, #15
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	3326      	adds	r3, #38	; 0x26
 8004668:	2210      	movs	r2, #16
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e035      	b.n	80046da <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800466e:	4b42      	ldr	r3, [pc, #264]	; (8004778 <USBD_CDC_Init+0x1e4>)
 8004670:	7819      	ldrb	r1, [r3, #0]
 8004672:	2340      	movs	r3, #64	; 0x40
 8004674:	2202      	movs	r2, #2
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f002 faa9 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800467c:	4b3e      	ldr	r3, [pc, #248]	; (8004778 <USBD_CDC_Init+0x1e4>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 020f 	and.w	r2, r3, #15
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	440b      	add	r3, r1
 8004690:	3324      	adds	r3, #36	; 0x24
 8004692:	2201      	movs	r2, #1
 8004694:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004696:	4b39      	ldr	r3, [pc, #228]	; (800477c <USBD_CDC_Init+0x1e8>)
 8004698:	7819      	ldrb	r1, [r3, #0]
 800469a:	2340      	movs	r3, #64	; 0x40
 800469c:	2202      	movs	r2, #2
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f002 fa95 	bl	8006bce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80046a4:	4b35      	ldr	r3, [pc, #212]	; (800477c <USBD_CDC_Init+0x1e8>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f003 020f 	and.w	r2, r3, #15
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80046bc:	2201      	movs	r2, #1
 80046be:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80046c0:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <USBD_CDC_Init+0x1ec>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	3326      	adds	r3, #38	; 0x26
 80046d6:	2210      	movs	r2, #16
 80046d8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80046da:	4b29      	ldr	r3, [pc, #164]	; (8004780 <USBD_CDC_Init+0x1ec>)
 80046dc:	7819      	ldrb	r1, [r3, #0]
 80046de:	2308      	movs	r3, #8
 80046e0:	2203      	movs	r2, #3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f002 fa73 	bl	8006bce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80046e8:	4b25      	ldr	r3, [pc, #148]	; (8004780 <USBD_CDC_Init+0x1ec>)
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	f003 020f 	and.w	r2, r3, #15
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3324      	adds	r3, #36	; 0x24
 80046fe:	2201      	movs	r2, #1
 8004700:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	33b0      	adds	r3, #176	; 0xb0
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004738:	2302      	movs	r3, #2
 800473a:	e018      	b.n	800476e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7c1b      	ldrb	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10a      	bne.n	800475a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <USBD_CDC_Init+0x1e8>)
 8004746:	7819      	ldrb	r1, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800474e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f002 fb2a 	bl	8006dac <USBD_LL_PrepareReceive>
 8004758:	e008      	b.n	800476c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <USBD_CDC_Init+0x1e8>)
 800475c:	7819      	ldrb	r1, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004764:	2340      	movs	r3, #64	; 0x40
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f002 fb20 	bl	8006dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	20000093 	.word	0x20000093
 800477c:	20000094 	.word	0x20000094
 8004780:	20000095 	.word	0x20000095

08004784 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004790:	4b3a      	ldr	r3, [pc, #232]	; (800487c <USBD_CDC_DeInit+0xf8>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f002 fa3f 	bl	8006c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800479c:	4b37      	ldr	r3, [pc, #220]	; (800487c <USBD_CDC_DeInit+0xf8>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	f003 020f 	and.w	r2, r3, #15
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	3324      	adds	r3, #36	; 0x24
 80047b2:	2200      	movs	r2, #0
 80047b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80047b6:	4b32      	ldr	r3, [pc, #200]	; (8004880 <USBD_CDC_DeInit+0xfc>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f002 fa2c 	bl	8006c1a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <USBD_CDC_DeInit+0xfc>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	f003 020f 	and.w	r2, r3, #15
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047da:	2200      	movs	r2, #0
 80047dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <USBD_CDC_DeInit+0x100>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f002 fa18 	bl	8006c1a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80047ea:	4b26      	ldr	r3, [pc, #152]	; (8004884 <USBD_CDC_DeInit+0x100>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f003 020f 	and.w	r2, r3, #15
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	3324      	adds	r3, #36	; 0x24
 8004800:	2200      	movs	r2, #0
 8004802:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004804:	4b1f      	ldr	r3, [pc, #124]	; (8004884 <USBD_CDC_DeInit+0x100>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	f003 020f 	and.w	r2, r3, #15
 800480c:	6879      	ldr	r1, [r7, #4]
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	3326      	adds	r3, #38	; 0x26
 800481a:	2200      	movs	r2, #0
 800481c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	32b0      	adds	r2, #176	; 0xb0
 8004828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01f      	beq.n	8004870 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	33b0      	adds	r3, #176	; 0xb0
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4413      	add	r3, r2
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	32b0      	adds	r2, #176	; 0xb0
 800484e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004852:	4618      	mov	r0, r3
 8004854:	f002 faec 	bl	8006e30 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	32b0      	adds	r2, #176	; 0xb0
 8004862:	2100      	movs	r1, #0
 8004864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000093 	.word	0x20000093
 8004880:	20000094 	.word	0x20000094
 8004884:	20000095 	.word	0x20000095

08004888 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	32b0      	adds	r2, #176	; 0xb0
 800489c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80048a6:	2300      	movs	r3, #0
 80048a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e0bf      	b.n	8004a38 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d050      	beq.n	8004966 <USBD_CDC_Setup+0xde>
 80048c4:	2b20      	cmp	r3, #32
 80048c6:	f040 80af 	bne.w	8004a28 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	88db      	ldrh	r3, [r3, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d03a      	beq.n	8004948 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b25b      	sxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da1b      	bge.n	8004914 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	33b0      	adds	r3, #176	; 0xb0
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4413      	add	r3, r2
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80048f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	88d2      	ldrh	r2, [r2, #6]
 80048f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	88db      	ldrh	r3, [r3, #6]
 80048fe:	2b07      	cmp	r3, #7
 8004900:	bf28      	it	cs
 8004902:	2307      	movcs	r3, #7
 8004904:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	89fa      	ldrh	r2, [r7, #14]
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f001 fd43 	bl	8006398 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004912:	e090      	b.n	8004a36 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	785a      	ldrb	r2, [r3, #1]
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	88db      	ldrh	r3, [r3, #6]
 8004922:	2b3f      	cmp	r3, #63	; 0x3f
 8004924:	d803      	bhi.n	800492e <USBD_CDC_Setup+0xa6>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	88db      	ldrh	r3, [r3, #6]
 800492a:	b2da      	uxtb	r2, r3
 800492c:	e000      	b.n	8004930 <USBD_CDC_Setup+0xa8>
 800492e:	2240      	movs	r2, #64	; 0x40
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004936:	6939      	ldr	r1, [r7, #16]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800493e:	461a      	mov	r2, r3
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f001 fd55 	bl	80063f0 <USBD_CtlPrepareRx>
      break;
 8004946:	e076      	b.n	8004a36 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	33b0      	adds	r3, #176	; 0xb0
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	7850      	ldrb	r0, [r2, #1]
 800495e:	2200      	movs	r2, #0
 8004960:	6839      	ldr	r1, [r7, #0]
 8004962:	4798      	blx	r3
      break;
 8004964:	e067      	b.n	8004a36 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	785b      	ldrb	r3, [r3, #1]
 800496a:	2b0b      	cmp	r3, #11
 800496c:	d851      	bhi.n	8004a12 <USBD_CDC_Setup+0x18a>
 800496e:	a201      	add	r2, pc, #4	; (adr r2, 8004974 <USBD_CDC_Setup+0xec>)
 8004970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004974:	080049a5 	.word	0x080049a5
 8004978:	08004a21 	.word	0x08004a21
 800497c:	08004a13 	.word	0x08004a13
 8004980:	08004a13 	.word	0x08004a13
 8004984:	08004a13 	.word	0x08004a13
 8004988:	08004a13 	.word	0x08004a13
 800498c:	08004a13 	.word	0x08004a13
 8004990:	08004a13 	.word	0x08004a13
 8004994:	08004a13 	.word	0x08004a13
 8004998:	08004a13 	.word	0x08004a13
 800499c:	080049cf 	.word	0x080049cf
 80049a0:	080049f9 	.word	0x080049f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d107      	bne.n	80049c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80049b0:	f107 030a 	add.w	r3, r7, #10
 80049b4:	2202      	movs	r2, #2
 80049b6:	4619      	mov	r1, r3
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 fced 	bl	8006398 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049be:	e032      	b.n	8004a26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049c0:	6839      	ldr	r1, [r7, #0]
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f001 fc77 	bl	80062b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80049c8:	2303      	movs	r3, #3
 80049ca:	75fb      	strb	r3, [r7, #23]
          break;
 80049cc:	e02b      	b.n	8004a26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d107      	bne.n	80049ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80049da:	f107 030d 	add.w	r3, r7, #13
 80049de:	2201      	movs	r2, #1
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f001 fcd8 	bl	8006398 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80049e8:	e01d      	b.n	8004a26 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80049ea:	6839      	ldr	r1, [r7, #0]
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f001 fc62 	bl	80062b6 <USBD_CtlError>
            ret = USBD_FAIL;
 80049f2:	2303      	movs	r3, #3
 80049f4:	75fb      	strb	r3, [r7, #23]
          break;
 80049f6:	e016      	b.n	8004a26 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b03      	cmp	r3, #3
 8004a02:	d00f      	beq.n	8004a24 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004a04:	6839      	ldr	r1, [r7, #0]
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 fc55 	bl	80062b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004a10:	e008      	b.n	8004a24 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004a12:	6839      	ldr	r1, [r7, #0]
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f001 fc4e 	bl	80062b6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	75fb      	strb	r3, [r7, #23]
          break;
 8004a1e:	e002      	b.n	8004a26 <USBD_CDC_Setup+0x19e>
          break;
 8004a20:	bf00      	nop
 8004a22:	e008      	b.n	8004a36 <USBD_CDC_Setup+0x1ae>
          break;
 8004a24:	bf00      	nop
      }
      break;
 8004a26:	e006      	b.n	8004a36 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f001 fc43 	bl	80062b6 <USBD_CtlError>
      ret = USBD_FAIL;
 8004a30:	2303      	movs	r3, #3
 8004a32:	75fb      	strb	r3, [r7, #23]
      break;
 8004a34:	bf00      	nop
  }

  return (uint8_t)ret;
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	460b      	mov	r3, r1
 8004a4a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004a52:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	32b0      	adds	r2, #176	; 0xb0
 8004a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e065      	b.n	8004b36 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	32b0      	adds	r2, #176	; 0xb0
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	3318      	adds	r3, #24
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02f      	beq.n	8004af4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	f003 020f 	and.w	r2, r3, #15
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	f003 010f 	and.w	r1, r3, #15
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	440b      	add	r3, r1
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4403      	add	r3, r0
 8004abc:	3348      	adds	r3, #72	; 0x48
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	fbb2 f1f3 	udiv	r1, r2, r3
 8004ac4:	fb01 f303 	mul.w	r3, r1, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d112      	bne.n	8004af4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004ace:	78fb      	ldrb	r3, [r7, #3]
 8004ad0:	f003 020f 	and.w	r2, r3, #15
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	3318      	adds	r3, #24
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004ae6:	78f9      	ldrb	r1, [r7, #3]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2200      	movs	r2, #0
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f002 f93c 	bl	8006d6a <USBD_LL_Transmit>
 8004af2:	e01f      	b.n	8004b34 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	33b0      	adds	r3, #176	; 0xb0
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d010      	beq.n	8004b34 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	33b0      	adds	r3, #176	; 0xb0
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
 8004b46:	460b      	mov	r3, r1
 8004b48:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	32b0      	adds	r2, #176	; 0xb0
 8004b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b58:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	32b0      	adds	r2, #176	; 0xb0
 8004b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e01a      	b.n	8004ba6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	4619      	mov	r1, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f002 f93a 	bl	8006dee <USBD_LL_GetRxDataSize>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	33b0      	adds	r3, #176	; 0xb0
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	32b0      	adds	r2, #176	; 0xb0
 8004bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bc4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e025      	b.n	8004c1c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	33b0      	adds	r3, #176	; 0xb0
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <USBD_CDC_EP0_RxReady+0x6c>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004bea:	2bff      	cmp	r3, #255	; 0xff
 8004bec:	d015      	beq.n	8004c1a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	33b0      	adds	r3, #176	; 0xb0
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004c06:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	22ff      	movs	r2, #255	; 0xff
 8004c16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c2c:	2182      	movs	r1, #130	; 0x82
 8004c2e:	4818      	ldr	r0, [pc, #96]	; (8004c90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c30:	f000 fd09 	bl	8005646 <USBD_GetEpDesc>
 8004c34:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004c36:	2101      	movs	r1, #1
 8004c38:	4815      	ldr	r0, [pc, #84]	; (8004c90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c3a:	f000 fd04 	bl	8005646 <USBD_GetEpDesc>
 8004c3e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004c40:	2181      	movs	r1, #129	; 0x81
 8004c42:	4813      	ldr	r0, [pc, #76]	; (8004c90 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004c44:	f000 fcff 	bl	8005646 <USBD_GetEpDesc>
 8004c48:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2210      	movs	r2, #16
 8004c54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d006      	beq.n	8004c6a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c64:	711a      	strb	r2, [r3, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d006      	beq.n	8004c7e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c78:	711a      	strb	r2, [r3, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2243      	movs	r2, #67	; 0x43
 8004c82:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004c84:	4b02      	ldr	r3, [pc, #8]	; (8004c90 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	20000050 	.word	0x20000050

08004c94 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004c9c:	2182      	movs	r1, #130	; 0x82
 8004c9e:	4818      	ldr	r0, [pc, #96]	; (8004d00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004ca0:	f000 fcd1 	bl	8005646 <USBD_GetEpDesc>
 8004ca4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4815      	ldr	r0, [pc, #84]	; (8004d00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004caa:	f000 fccc 	bl	8005646 <USBD_GetEpDesc>
 8004cae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004cb0:	2181      	movs	r1, #129	; 0x81
 8004cb2:	4813      	ldr	r0, [pc, #76]	; (8004d00 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004cb4:	f000 fcc7 	bl	8005646 <USBD_GetEpDesc>
 8004cb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2210      	movs	r2, #16
 8004cc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d006      	beq.n	8004cda <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	711a      	strb	r2, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f042 0202 	orr.w	r2, r2, #2
 8004cd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	711a      	strb	r2, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f042 0202 	orr.w	r2, r2, #2
 8004cec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2243      	movs	r2, #67	; 0x43
 8004cf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004cf4:	4b02      	ldr	r3, [pc, #8]	; (8004d00 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000050 	.word	0x20000050

08004d04 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d0c:	2182      	movs	r1, #130	; 0x82
 8004d0e:	4818      	ldr	r0, [pc, #96]	; (8004d70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d10:	f000 fc99 	bl	8005646 <USBD_GetEpDesc>
 8004d14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d16:	2101      	movs	r1, #1
 8004d18:	4815      	ldr	r0, [pc, #84]	; (8004d70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d1a:	f000 fc94 	bl	8005646 <USBD_GetEpDesc>
 8004d1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d20:	2181      	movs	r1, #129	; 0x81
 8004d22:	4813      	ldr	r0, [pc, #76]	; (8004d70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004d24:	f000 fc8f 	bl	8005646 <USBD_GetEpDesc>
 8004d28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	2210      	movs	r2, #16
 8004d34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d006      	beq.n	8004d4a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d44:	711a      	strb	r2, [r3, #4]
 8004d46:	2200      	movs	r2, #0
 8004d48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d006      	beq.n	8004d5e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d58:	711a      	strb	r2, [r3, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2243      	movs	r2, #67	; 0x43
 8004d62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004d64:	4b02      	ldr	r3, [pc, #8]	; (8004d70 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000050 	.word	0x20000050

08004d74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	220a      	movs	r2, #10
 8004d80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004d82:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr
 8004d90:	2000000c 	.word	0x2000000c

08004d94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d101      	bne.n	8004da8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e009      	b.n	8004dbc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	33b0      	adds	r3, #176	; 0xb0
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	32b0      	adds	r2, #176	; 0xb0
 8004dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e008      	b.n	8004e00 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	371c      	adds	r7, #28
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	32b0      	adds	r2, #176	; 0xb0
 8004e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d101      	bne.n	8004e30 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004e2c:	2303      	movs	r3, #3
 8004e2e:	e004      	b.n	8004e3a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	32b0      	adds	r2, #176	; 0xb0
 8004e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	32b0      	adds	r2, #176	; 0xb0
 8004e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e018      	b.n	8004ea8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	7c1b      	ldrb	r3, [r3, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10a      	bne.n	8004e94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	; (8004eb0 <USBD_CDC_ReceivePacket+0x68>)
 8004e80:	7819      	ldrb	r1, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f001 ff8d 	bl	8006dac <USBD_LL_PrepareReceive>
 8004e92:	e008      	b.n	8004ea6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <USBD_CDC_ReceivePacket+0x68>)
 8004e96:	7819      	ldrb	r1, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004e9e:	2340      	movs	r3, #64	; 0x40
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f001 ff83 	bl	8006dac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3710      	adds	r7, #16
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000094 	.word	0x20000094

08004eb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b086      	sub	sp, #24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	60b9      	str	r1, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e01f      	b.n	8004f0c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	79fa      	ldrb	r2, [r7, #7]
 8004efe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f001 fdfd 	bl	8006b00 <USBD_LL_Init>
 8004f06:	4603      	mov	r3, r0
 8004f08:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d101      	bne.n	8004f2c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e025      	b.n	8004f78 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	32ae      	adds	r2, #174	; 0xae
 8004f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00f      	beq.n	8004f68 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	32ae      	adds	r2, #174	; 0xae
 8004f52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	f107 020e 	add.w	r2, r7, #14
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4798      	blx	r3
 8004f60:	4602      	mov	r2, r0
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f001 fe05 	bl	8006b98 <USBD_LL_Start>
 8004f8e:	4603      	mov	r3, r0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3708      	adds	r7, #8
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004fa0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	78fa      	ldrb	r2, [r7, #3]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
 8004fd8:	4603      	mov	r3, r0
 8004fda:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	78fa      	ldrb	r2, [r7, #3]
 8005000:	4611      	mov	r1, r2
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
 8005006:	4603      	mov	r3, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800500c:	2303      	movs	r3, #3
 800500e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005010:	7bfb      	ldrb	r3, [r7, #15]
}
 8005012:	4618      	mov	r0, r3
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800501a:	b580      	push	{r7, lr}
 800501c:	b084      	sub	sp, #16
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800502a:	6839      	ldr	r1, [r7, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f001 f908 	bl	8006242 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	2b02      	cmp	r3, #2
 8005054:	d01a      	beq.n	800508c <USBD_LL_SetupStage+0x72>
 8005056:	2b02      	cmp	r3, #2
 8005058:	d822      	bhi.n	80050a0 <USBD_LL_SetupStage+0x86>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d002      	beq.n	8005064 <USBD_LL_SetupStage+0x4a>
 800505e:	2b01      	cmp	r3, #1
 8005060:	d00a      	beq.n	8005078 <USBD_LL_SetupStage+0x5e>
 8005062:	e01d      	b.n	80050a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800506a:	4619      	mov	r1, r3
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 fb5f 	bl	8005730 <USBD_StdDevReq>
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
      break;
 8005076:	e020      	b.n	80050ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 fbc7 	bl	8005814 <USBD_StdItfReq>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
      break;
 800508a:	e016      	b.n	80050ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005092:	4619      	mov	r1, r3
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fc29 	bl	80058ec <USBD_StdEPReq>
 800509a:	4603      	mov	r3, r0
 800509c:	73fb      	strb	r3, [r7, #15]
      break;
 800509e:	e00c      	b.n	80050ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80050a6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	4619      	mov	r1, r3
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f001 fdd2 	bl	8006c58 <USBD_LL_StallEP>
 80050b4:	4603      	mov	r3, r0
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	bf00      	nop
  }

  return ret;
 80050ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3710      	adds	r7, #16
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	460b      	mov	r3, r1
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d16e      	bne.n	80051ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80050e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	f040 8098 	bne.w	8005220 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d913      	bls.n	8005124 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	1ad2      	subs	r2, r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	4293      	cmp	r3, r2
 8005114:	bf28      	it	cs
 8005116:	4613      	movcs	r3, r2
 8005118:	461a      	mov	r2, r3
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f001 f984 	bl	800642a <USBD_CtlContinueRx>
 8005122:	e07d      	b.n	8005220 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	2b02      	cmp	r3, #2
 8005130:	d014      	beq.n	800515c <USBD_LL_DataOutStage+0x98>
 8005132:	2b02      	cmp	r3, #2
 8005134:	d81d      	bhi.n	8005172 <USBD_LL_DataOutStage+0xae>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <USBD_LL_DataOutStage+0x7c>
 800513a:	2b01      	cmp	r3, #1
 800513c:	d003      	beq.n	8005146 <USBD_LL_DataOutStage+0x82>
 800513e:	e018      	b.n	8005172 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	75bb      	strb	r3, [r7, #22]
            break;
 8005144:	e018      	b.n	8005178 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800514c:	b2db      	uxtb	r3, r3
 800514e:	4619      	mov	r1, r3
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f000 fa5e 	bl	8005612 <USBD_CoreFindIF>
 8005156:	4603      	mov	r3, r0
 8005158:	75bb      	strb	r3, [r7, #22]
            break;
 800515a:	e00d      	b.n	8005178 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005162:	b2db      	uxtb	r3, r3
 8005164:	4619      	mov	r1, r3
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 fa60 	bl	800562c <USBD_CoreFindEP>
 800516c:	4603      	mov	r3, r0
 800516e:	75bb      	strb	r3, [r7, #22]
            break;
 8005170:	e002      	b.n	8005178 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	75bb      	strb	r3, [r7, #22]
            break;
 8005176:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005178:	7dbb      	ldrb	r3, [r7, #22]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d119      	bne.n	80051b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b03      	cmp	r3, #3
 8005188:	d113      	bne.n	80051b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800518a:	7dba      	ldrb	r2, [r7, #22]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	32ae      	adds	r2, #174	; 0xae
 8005190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800519a:	7dba      	ldrb	r2, [r7, #22]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80051a2:	7dba      	ldrb	r2, [r7, #22]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	32ae      	adds	r2, #174	; 0xae
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f001 f94a 	bl	800644c <USBD_CtlSendStatus>
 80051b8:	e032      	b.n	8005220 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80051ba:	7afb      	ldrb	r3, [r7, #11]
 80051bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	4619      	mov	r1, r3
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 fa31 	bl	800562c <USBD_CoreFindEP>
 80051ca:	4603      	mov	r3, r0
 80051cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80051ce:	7dbb      	ldrb	r3, [r7, #22]
 80051d0:	2bff      	cmp	r3, #255	; 0xff
 80051d2:	d025      	beq.n	8005220 <USBD_LL_DataOutStage+0x15c>
 80051d4:	7dbb      	ldrb	r3, [r7, #22]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d122      	bne.n	8005220 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b03      	cmp	r3, #3
 80051e4:	d117      	bne.n	8005216 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80051e6:	7dba      	ldrb	r2, [r7, #22]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	32ae      	adds	r2, #174	; 0xae
 80051ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00f      	beq.n	8005216 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80051f6:	7dba      	ldrb	r2, [r7, #22]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80051fe:	7dba      	ldrb	r2, [r7, #22]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	32ae      	adds	r2, #174	; 0xae
 8005204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	7afa      	ldrb	r2, [r7, #11]
 800520c:	4611      	mov	r1, r2
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	4798      	blx	r3
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800521c:	7dfb      	ldrb	r3, [r7, #23]
 800521e:	e000      	b.n	8005222 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3718      	adds	r7, #24
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b086      	sub	sp, #24
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	460b      	mov	r3, r1
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005238:	7afb      	ldrb	r3, [r7, #11]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d16f      	bne.n	800531e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3314      	adds	r3, #20
 8005242:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800524a:	2b02      	cmp	r3, #2
 800524c:	d15a      	bne.n	8005304 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	429a      	cmp	r2, r3
 8005258:	d914      	bls.n	8005284 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	1ad2      	subs	r2, r2, r3
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	461a      	mov	r2, r3
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f001 f8ac 	bl	80063ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005276:	2300      	movs	r3, #0
 8005278:	2200      	movs	r2, #0
 800527a:	2100      	movs	r1, #0
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f001 fd95 	bl	8006dac <USBD_LL_PrepareReceive>
 8005282:	e03f      	b.n	8005304 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	429a      	cmp	r2, r3
 800528e:	d11c      	bne.n	80052ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005298:	429a      	cmp	r2, r3
 800529a:	d316      	bcc.n	80052ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d20f      	bcs.n	80052ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80052aa:	2200      	movs	r2, #0
 80052ac:	2100      	movs	r1, #0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f001 f88d 	bl	80063ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052bc:	2300      	movs	r3, #0
 80052be:	2200      	movs	r2, #0
 80052c0:	2100      	movs	r1, #0
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f001 fd72 	bl	8006dac <USBD_LL_PrepareReceive>
 80052c8:	e01c      	b.n	8005304 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d10f      	bne.n	80052f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d009      	beq.n	80052f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052f6:	2180      	movs	r1, #128	; 0x80
 80052f8:	68f8      	ldr	r0, [r7, #12]
 80052fa:	f001 fcad 	bl	8006c58 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f001 f8b7 	bl	8006472 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d03a      	beq.n	8005384 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f7ff fe42 	bl	8004f98 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800531c:	e032      	b.n	8005384 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800531e:	7afb      	ldrb	r3, [r7, #11]
 8005320:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005324:	b2db      	uxtb	r3, r3
 8005326:	4619      	mov	r1, r3
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f000 f97f 	bl	800562c <USBD_CoreFindEP>
 800532e:	4603      	mov	r3, r0
 8005330:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2bff      	cmp	r3, #255	; 0xff
 8005336:	d025      	beq.n	8005384 <USBD_LL_DataInStage+0x15a>
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d122      	bne.n	8005384 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b03      	cmp	r3, #3
 8005348:	d11c      	bne.n	8005384 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800534a:	7dfa      	ldrb	r2, [r7, #23]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	32ae      	adds	r2, #174	; 0xae
 8005350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800535a:	7dfa      	ldrb	r2, [r7, #23]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005362:	7dfa      	ldrb	r2, [r7, #23]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	32ae      	adds	r2, #174	; 0xae
 8005368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	7afa      	ldrb	r2, [r7, #11]
 8005370:	4611      	mov	r1, r2
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	4798      	blx	r3
 8005376:	4603      	mov	r3, r0
 8005378:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800537a:	7dbb      	ldrb	r3, [r7, #22]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005380:	7dbb      	ldrb	r3, [r7, #22]
 8005382:	e000      	b.n	8005386 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d014      	beq.n	80053f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00e      	beq.n	80053f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6852      	ldr	r2, [r2, #4]
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	4611      	mov	r1, r2
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	4798      	blx	r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80053f0:	2303      	movs	r3, #3
 80053f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80053f4:	2340      	movs	r3, #64	; 0x40
 80053f6:	2200      	movs	r2, #0
 80053f8:	2100      	movs	r1, #0
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fbe7 	bl	8006bce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2240      	movs	r2, #64	; 0x40
 800540c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005410:	2340      	movs	r3, #64	; 0x40
 8005412:	2200      	movs	r2, #0
 8005414:	2180      	movs	r1, #128	; 0x80
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f001 fbd9 	bl	8006bce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2240      	movs	r2, #64	; 0x40
 8005426:	621a      	str	r2, [r3, #32]

  return ret;
 8005428:	7bfb      	ldrb	r3, [r7, #15]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005432:	b480      	push	{r7}
 8005434:	b083      	sub	sp, #12
 8005436:	af00      	add	r7, sp, #0
 8005438:	6078      	str	r0, [r7, #4]
 800543a:	460b      	mov	r3, r1
 800543c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	78fa      	ldrb	r2, [r7, #3]
 8005442:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005460:	b2da      	uxtb	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2204      	movs	r2, #4
 800546c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b04      	cmp	r3, #4
 8005490:	d106      	bne.n	80054a0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005498:	b2da      	uxtb	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b082      	sub	sp, #8
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b03      	cmp	r3, #3
 80054c0:	d110      	bne.n	80054e4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00b      	beq.n	80054e4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d005      	beq.n	80054e4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	460b      	mov	r3, r1
 80054f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	32ae      	adds	r2, #174	; 0xae
 8005504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800550c:	2303      	movs	r3, #3
 800550e:	e01c      	b.n	800554a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b03      	cmp	r3, #3
 800551a:	d115      	bne.n	8005548 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	32ae      	adds	r2, #174	; 0xae
 8005526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00b      	beq.n	8005548 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	32ae      	adds	r2, #174	; 0xae
 800553a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800553e:	6a1b      	ldr	r3, [r3, #32]
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	4611      	mov	r1, r2
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b082      	sub	sp, #8
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	32ae      	adds	r2, #174	; 0xae
 8005568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005570:	2303      	movs	r3, #3
 8005572:	e01c      	b.n	80055ae <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b03      	cmp	r3, #3
 800557e:	d115      	bne.n	80055ac <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	32ae      	adds	r2, #174	; 0xae
 800558a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005590:	2b00      	cmp	r3, #0
 8005592:	d00b      	beq.n	80055ac <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	32ae      	adds	r2, #174	; 0xae
 800559e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	78fa      	ldrb	r2, [r7, #3]
 80055a6:	4611      	mov	r1, r2
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80055ac:	2300      	movs	r3, #0
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80055d4:	2300      	movs	r3, #0
 80055d6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6852      	ldr	r2, [r2, #4]
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	4611      	mov	r1, r2
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	4798      	blx	r3
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005604:	2303      	movs	r3, #3
 8005606:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005608:	7bfb      	ldrb	r3, [r7, #15]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	460b      	mov	r3, r1
 800561c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800561e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005620:	4618      	mov	r0, r3
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005638:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b086      	sub	sp, #24
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	460b      	mov	r3, r1
 8005650:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	885b      	ldrh	r3, [r3, #2]
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	429a      	cmp	r2, r3
 800566c:	d920      	bls.n	80056b0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	b29b      	uxth	r3, r3
 8005674:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005676:	e013      	b.n	80056a0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005678:	f107 030a 	add.w	r3, r7, #10
 800567c:	4619      	mov	r1, r3
 800567e:	6978      	ldr	r0, [r7, #20]
 8005680:	f000 f81b 	bl	80056ba <USBD_GetNextDesc>
 8005684:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	785b      	ldrb	r3, [r3, #1]
 800568a:	2b05      	cmp	r3, #5
 800568c:	d108      	bne.n	80056a0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	789b      	ldrb	r3, [r3, #2]
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	429a      	cmp	r2, r3
 800569a:	d008      	beq.n	80056ae <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	885b      	ldrh	r3, [r3, #2]
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	897b      	ldrh	r3, [r7, #10]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d8e5      	bhi.n	8005678 <USBD_GetEpDesc+0x32>
 80056ac:	e000      	b.n	80056b0 <USBD_GetEpDesc+0x6a>
          break;
 80056ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80056b0:	693b      	ldr	r3, [r7, #16]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3718      	adds	r7, #24
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}

080056ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	4413      	add	r3, r2
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80056e6:	68fb      	ldr	r3, [r7, #12]
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	3301      	adds	r3, #1
 800570a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005712:	8a3b      	ldrh	r3, [r7, #16]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	b21a      	sxth	r2, r3
 8005718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800571c:	4313      	orrs	r3, r2
 800571e:	b21b      	sxth	r3, r3
 8005720:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005722:	89fb      	ldrh	r3, [r7, #14]
}
 8005724:	4618      	mov	r0, r3
 8005726:	371c      	adds	r7, #28
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b084      	sub	sp, #16
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005746:	2b40      	cmp	r3, #64	; 0x40
 8005748:	d005      	beq.n	8005756 <USBD_StdDevReq+0x26>
 800574a:	2b40      	cmp	r3, #64	; 0x40
 800574c:	d857      	bhi.n	80057fe <USBD_StdDevReq+0xce>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00f      	beq.n	8005772 <USBD_StdDevReq+0x42>
 8005752:	2b20      	cmp	r3, #32
 8005754:	d153      	bne.n	80057fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	32ae      	adds	r2, #174	; 0xae
 8005760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	6839      	ldr	r1, [r7, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
 800576c:	4603      	mov	r3, r0
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	e04a      	b.n	8005808 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	785b      	ldrb	r3, [r3, #1]
 8005776:	2b09      	cmp	r3, #9
 8005778:	d83b      	bhi.n	80057f2 <USBD_StdDevReq+0xc2>
 800577a:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <USBD_StdDevReq+0x50>)
 800577c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005780:	080057d5 	.word	0x080057d5
 8005784:	080057e9 	.word	0x080057e9
 8005788:	080057f3 	.word	0x080057f3
 800578c:	080057df 	.word	0x080057df
 8005790:	080057f3 	.word	0x080057f3
 8005794:	080057b3 	.word	0x080057b3
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057f3 	.word	0x080057f3
 80057a0:	080057cb 	.word	0x080057cb
 80057a4:	080057bd 	.word	0x080057bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80057a8:	6839      	ldr	r1, [r7, #0]
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa3c 	bl	8005c28 <USBD_GetDescriptor>
          break;
 80057b0:	e024      	b.n	80057fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80057b2:	6839      	ldr	r1, [r7, #0]
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fba1 	bl	8005efc <USBD_SetAddress>
          break;
 80057ba:	e01f      	b.n	80057fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80057bc:	6839      	ldr	r1, [r7, #0]
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fbe0 	bl	8005f84 <USBD_SetConfig>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73fb      	strb	r3, [r7, #15]
          break;
 80057c8:	e018      	b.n	80057fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80057ca:	6839      	ldr	r1, [r7, #0]
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fc83 	bl	80060d8 <USBD_GetConfig>
          break;
 80057d2:	e013      	b.n	80057fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80057d4:	6839      	ldr	r1, [r7, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 fcb4 	bl	8006144 <USBD_GetStatus>
          break;
 80057dc:	e00e      	b.n	80057fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fce3 	bl	80061ac <USBD_SetFeature>
          break;
 80057e6:	e009      	b.n	80057fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fd07 	bl	80061fe <USBD_ClrFeature>
          break;
 80057f0:	e004      	b.n	80057fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80057f2:	6839      	ldr	r1, [r7, #0]
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fd5e 	bl	80062b6 <USBD_CtlError>
          break;
 80057fa:	bf00      	nop
      }
      break;
 80057fc:	e004      	b.n	8005808 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 fd58 	bl	80062b6 <USBD_CtlError>
      break;
 8005806:	bf00      	nop
  }

  return ret;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop

08005814 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582a:	2b40      	cmp	r3, #64	; 0x40
 800582c:	d005      	beq.n	800583a <USBD_StdItfReq+0x26>
 800582e:	2b40      	cmp	r3, #64	; 0x40
 8005830:	d852      	bhi.n	80058d8 <USBD_StdItfReq+0xc4>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <USBD_StdItfReq+0x26>
 8005836:	2b20      	cmp	r3, #32
 8005838:	d14e      	bne.n	80058d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005840:	b2db      	uxtb	r3, r3
 8005842:	3b01      	subs	r3, #1
 8005844:	2b02      	cmp	r3, #2
 8005846:	d840      	bhi.n	80058ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	889b      	ldrh	r3, [r3, #4]
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b01      	cmp	r3, #1
 8005850:	d836      	bhi.n	80058c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	889b      	ldrh	r3, [r3, #4]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7ff fed9 	bl	8005612 <USBD_CoreFindIF>
 8005860:	4603      	mov	r3, r0
 8005862:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2bff      	cmp	r3, #255	; 0xff
 8005868:	d01d      	beq.n	80058a6 <USBD_StdItfReq+0x92>
 800586a:	7bbb      	ldrb	r3, [r7, #14]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d11a      	bne.n	80058a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005870:	7bba      	ldrb	r2, [r7, #14]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	32ae      	adds	r2, #174	; 0xae
 8005876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d00f      	beq.n	80058a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005880:	7bba      	ldrb	r2, [r7, #14]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005888:	7bba      	ldrb	r2, [r7, #14]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	32ae      	adds	r2, #174	; 0xae
 800588e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	4798      	blx	r3
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800589e:	e004      	b.n	80058aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80058a0:	2303      	movs	r3, #3
 80058a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80058a4:	e001      	b.n	80058aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80058a6:	2303      	movs	r3, #3
 80058a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	88db      	ldrh	r3, [r3, #6]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d110      	bne.n	80058d4 <USBD_StdItfReq+0xc0>
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10d      	bne.n	80058d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fdc7 	bl	800644c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80058be:	e009      	b.n	80058d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 fcf7 	bl	80062b6 <USBD_CtlError>
          break;
 80058c8:	e004      	b.n	80058d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fcf2 	bl	80062b6 <USBD_CtlError>
          break;
 80058d2:	e000      	b.n	80058d6 <USBD_StdItfReq+0xc2>
          break;
 80058d4:	bf00      	nop
      }
      break;
 80058d6:	e004      	b.n	80058e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fceb 	bl	80062b6 <USBD_CtlError>
      break;
 80058e0:	bf00      	nop
  }

  return ret;
 80058e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80058f6:	2300      	movs	r3, #0
 80058f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	889b      	ldrh	r3, [r3, #4]
 80058fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005908:	2b40      	cmp	r3, #64	; 0x40
 800590a:	d007      	beq.n	800591c <USBD_StdEPReq+0x30>
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	f200 817f 	bhi.w	8005c10 <USBD_StdEPReq+0x324>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d02a      	beq.n	800596c <USBD_StdEPReq+0x80>
 8005916:	2b20      	cmp	r3, #32
 8005918:	f040 817a 	bne.w	8005c10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800591c:	7bbb      	ldrb	r3, [r7, #14]
 800591e:	4619      	mov	r1, r3
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f7ff fe83 	bl	800562c <USBD_CoreFindEP>
 8005926:	4603      	mov	r3, r0
 8005928:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800592a:	7b7b      	ldrb	r3, [r7, #13]
 800592c:	2bff      	cmp	r3, #255	; 0xff
 800592e:	f000 8174 	beq.w	8005c1a <USBD_StdEPReq+0x32e>
 8005932:	7b7b      	ldrb	r3, [r7, #13]
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 8170 	bne.w	8005c1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800593a:	7b7a      	ldrb	r2, [r7, #13]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005942:	7b7a      	ldrb	r2, [r7, #13]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	32ae      	adds	r2, #174	; 0xae
 8005948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8163 	beq.w	8005c1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005954:	7b7a      	ldrb	r2, [r7, #13]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	32ae      	adds	r2, #174	; 0xae
 800595a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	6839      	ldr	r1, [r7, #0]
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800596a:	e156      	b.n	8005c1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	785b      	ldrb	r3, [r3, #1]
 8005970:	2b03      	cmp	r3, #3
 8005972:	d008      	beq.n	8005986 <USBD_StdEPReq+0x9a>
 8005974:	2b03      	cmp	r3, #3
 8005976:	f300 8145 	bgt.w	8005c04 <USBD_StdEPReq+0x318>
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 809b 	beq.w	8005ab6 <USBD_StdEPReq+0x1ca>
 8005980:	2b01      	cmp	r3, #1
 8005982:	d03c      	beq.n	80059fe <USBD_StdEPReq+0x112>
 8005984:	e13e      	b.n	8005c04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d002      	beq.n	8005998 <USBD_StdEPReq+0xac>
 8005992:	2b03      	cmp	r3, #3
 8005994:	d016      	beq.n	80059c4 <USBD_StdEPReq+0xd8>
 8005996:	e02c      	b.n	80059f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005998:	7bbb      	ldrb	r3, [r7, #14]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00d      	beq.n	80059ba <USBD_StdEPReq+0xce>
 800599e:	7bbb      	ldrb	r3, [r7, #14]
 80059a0:	2b80      	cmp	r3, #128	; 0x80
 80059a2:	d00a      	beq.n	80059ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80059a4:	7bbb      	ldrb	r3, [r7, #14]
 80059a6:	4619      	mov	r1, r3
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f955 	bl	8006c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80059ae:	2180      	movs	r1, #128	; 0x80
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f001 f951 	bl	8006c58 <USBD_LL_StallEP>
 80059b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80059b8:	e020      	b.n	80059fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 fc7a 	bl	80062b6 <USBD_CtlError>
              break;
 80059c2:	e01b      	b.n	80059fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	885b      	ldrh	r3, [r3, #2]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10e      	bne.n	80059ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80059cc:	7bbb      	ldrb	r3, [r7, #14]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00b      	beq.n	80059ea <USBD_StdEPReq+0xfe>
 80059d2:	7bbb      	ldrb	r3, [r7, #14]
 80059d4:	2b80      	cmp	r3, #128	; 0x80
 80059d6:	d008      	beq.n	80059ea <USBD_StdEPReq+0xfe>
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	88db      	ldrh	r3, [r3, #6]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	4619      	mov	r1, r3
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f001 f937 	bl	8006c58 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fd2e 	bl	800644c <USBD_CtlSendStatus>

              break;
 80059f0:	e004      	b.n	80059fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fc5e 	bl	80062b6 <USBD_CtlError>
              break;
 80059fa:	bf00      	nop
          }
          break;
 80059fc:	e107      	b.n	8005c0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d002      	beq.n	8005a10 <USBD_StdEPReq+0x124>
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d016      	beq.n	8005a3c <USBD_StdEPReq+0x150>
 8005a0e:	e04b      	b.n	8005aa8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <USBD_StdEPReq+0x146>
 8005a16:	7bbb      	ldrb	r3, [r7, #14]
 8005a18:	2b80      	cmp	r3, #128	; 0x80
 8005a1a:	d00a      	beq.n	8005a32 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f001 f919 	bl	8006c58 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a26:	2180      	movs	r1, #128	; 0x80
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f001 f915 	bl	8006c58 <USBD_LL_StallEP>
 8005a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a30:	e040      	b.n	8005ab4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fc3e 	bl	80062b6 <USBD_CtlError>
              break;
 8005a3a:	e03b      	b.n	8005ab4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	885b      	ldrh	r3, [r3, #2]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d136      	bne.n	8005ab2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a4e:	7bbb      	ldrb	r3, [r7, #14]
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f001 f91f 	bl	8006c96 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fcf7 	bl	800644c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005a5e:	7bbb      	ldrb	r3, [r7, #14]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff fde2 	bl	800562c <USBD_CoreFindEP>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a6c:	7b7b      	ldrb	r3, [r7, #13]
 8005a6e:	2bff      	cmp	r3, #255	; 0xff
 8005a70:	d01f      	beq.n	8005ab2 <USBD_StdEPReq+0x1c6>
 8005a72:	7b7b      	ldrb	r3, [r7, #13]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d11c      	bne.n	8005ab2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005a78:	7b7a      	ldrb	r2, [r7, #13]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005a80:	7b7a      	ldrb	r2, [r7, #13]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	32ae      	adds	r2, #174	; 0xae
 8005a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d010      	beq.n	8005ab2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a90:	7b7a      	ldrb	r2, [r7, #13]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	32ae      	adds	r2, #174	; 0xae
 8005a96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	4798      	blx	r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005aa6:	e004      	b.n	8005ab2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fc03 	bl	80062b6 <USBD_CtlError>
              break;
 8005ab0:	e000      	b.n	8005ab4 <USBD_StdEPReq+0x1c8>
              break;
 8005ab2:	bf00      	nop
          }
          break;
 8005ab4:	e0ab      	b.n	8005c0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d002      	beq.n	8005ac8 <USBD_StdEPReq+0x1dc>
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	d032      	beq.n	8005b2c <USBD_StdEPReq+0x240>
 8005ac6:	e097      	b.n	8005bf8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d007      	beq.n	8005ade <USBD_StdEPReq+0x1f2>
 8005ace:	7bbb      	ldrb	r3, [r7, #14]
 8005ad0:	2b80      	cmp	r3, #128	; 0x80
 8005ad2:	d004      	beq.n	8005ade <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005ad4:	6839      	ldr	r1, [r7, #0]
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fbed 	bl	80062b6 <USBD_CtlError>
                break;
 8005adc:	e091      	b.n	8005c02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da0b      	bge.n	8005afe <USBD_StdEPReq+0x212>
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	3310      	adds	r3, #16
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4413      	add	r3, r2
 8005afa:	3304      	adds	r3, #4
 8005afc:	e00b      	b.n	8005b16 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005afe:	7bbb      	ldrb	r3, [r7, #14]
 8005b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	2202      	movs	r2, #2
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fc37 	bl	8006398 <USBD_CtlSendData>
              break;
 8005b2a:	e06a      	b.n	8005c02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b2c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	da11      	bge.n	8005b58 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b34:	7bbb      	ldrb	r3, [r7, #14]
 8005b36:	f003 020f 	and.w	r2, r3, #15
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	440b      	add	r3, r1
 8005b46:	3324      	adds	r3, #36	; 0x24
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d117      	bne.n	8005b7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fbb0 	bl	80062b6 <USBD_CtlError>
                  break;
 8005b56:	e054      	b.n	8005c02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	f003 020f 	and.w	r2, r3, #15
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d104      	bne.n	8005b7e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005b74:	6839      	ldr	r1, [r7, #0]
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fb9d 	bl	80062b6 <USBD_CtlError>
                  break;
 8005b7c:	e041      	b.n	8005c02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b7e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	da0b      	bge.n	8005b9e <USBD_StdEPReq+0x2b2>
 8005b86:	7bbb      	ldrb	r3, [r7, #14]
 8005b88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	3310      	adds	r3, #16
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	4413      	add	r3, r2
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	e00b      	b.n	8005bb6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b9e:	7bbb      	ldrb	r3, [r7, #14]
 8005ba0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bb8:	7bbb      	ldrb	r3, [r7, #14]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d002      	beq.n	8005bc4 <USBD_StdEPReq+0x2d8>
 8005bbe:	7bbb      	ldrb	r3, [r7, #14]
 8005bc0:	2b80      	cmp	r3, #128	; 0x80
 8005bc2:	d103      	bne.n	8005bcc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	601a      	str	r2, [r3, #0]
 8005bca:	e00e      	b.n	8005bea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 f87f 	bl	8006cd4 <USBD_LL_IsStallEP>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2201      	movs	r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	e002      	b.n	8005bea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	2202      	movs	r2, #2
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fbd1 	bl	8006398 <USBD_CtlSendData>
              break;
 8005bf6:	e004      	b.n	8005c02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005bf8:	6839      	ldr	r1, [r7, #0]
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fb5b 	bl	80062b6 <USBD_CtlError>
              break;
 8005c00:	bf00      	nop
          }
          break;
 8005c02:	e004      	b.n	8005c0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005c04:	6839      	ldr	r1, [r7, #0]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fb55 	bl	80062b6 <USBD_CtlError>
          break;
 8005c0c:	bf00      	nop
      }
      break;
 8005c0e:	e005      	b.n	8005c1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005c10:	6839      	ldr	r1, [r7, #0]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fb4f 	bl	80062b6 <USBD_CtlError>
      break;
 8005c18:	e000      	b.n	8005c1c <USBD_StdEPReq+0x330>
      break;
 8005c1a:	bf00      	nop
  }

  return ret;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	885b      	ldrh	r3, [r3, #2]
 8005c42:	0a1b      	lsrs	r3, r3, #8
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	2b06      	cmp	r3, #6
 8005c4a:	f200 8128 	bhi.w	8005e9e <USBD_GetDescriptor+0x276>
 8005c4e:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <USBD_GetDescriptor+0x2c>)
 8005c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c54:	08005c71 	.word	0x08005c71
 8005c58:	08005c89 	.word	0x08005c89
 8005c5c:	08005cc9 	.word	0x08005cc9
 8005c60:	08005e9f 	.word	0x08005e9f
 8005c64:	08005e9f 	.word	0x08005e9f
 8005c68:	08005e3f 	.word	0x08005e3f
 8005c6c:	08005e6b 	.word	0x08005e6b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	7c12      	ldrb	r2, [r2, #16]
 8005c7c:	f107 0108 	add.w	r1, r7, #8
 8005c80:	4610      	mov	r0, r2
 8005c82:	4798      	blx	r3
 8005c84:	60f8      	str	r0, [r7, #12]
      break;
 8005c86:	e112      	b.n	8005eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	7c1b      	ldrb	r3, [r3, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10d      	bne.n	8005cac <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f107 0208 	add.w	r2, r7, #8
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4798      	blx	r3
 8005ca0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005caa:	e100      	b.n	8005eae <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb4:	f107 0208 	add.w	r2, r7, #8
 8005cb8:	4610      	mov	r0, r2
 8005cba:	4798      	blx	r3
 8005cbc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	701a      	strb	r2, [r3, #0]
      break;
 8005cc6:	e0f2      	b.n	8005eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	885b      	ldrh	r3, [r3, #2]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b05      	cmp	r3, #5
 8005cd0:	f200 80ac 	bhi.w	8005e2c <USBD_GetDescriptor+0x204>
 8005cd4:	a201      	add	r2, pc, #4	; (adr r2, 8005cdc <USBD_GetDescriptor+0xb4>)
 8005cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cda:	bf00      	nop
 8005cdc:	08005cf5 	.word	0x08005cf5
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d5d 	.word	0x08005d5d
 8005ce8:	08005d91 	.word	0x08005d91
 8005cec:	08005dc5 	.word	0x08005dc5
 8005cf0:	08005df9 	.word	0x08005df9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	7c12      	ldrb	r2, [r2, #16]
 8005d0c:	f107 0108 	add.w	r1, r7, #8
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d16:	e091      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d18:	6839      	ldr	r1, [r7, #0]
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 facb 	bl	80062b6 <USBD_CtlError>
            err++;
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	3301      	adds	r3, #1
 8005d24:	72fb      	strb	r3, [r7, #11]
          break;
 8005d26:	e089      	b.n	8005e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	7c12      	ldrb	r2, [r2, #16]
 8005d40:	f107 0108 	add.w	r1, r7, #8
 8005d44:	4610      	mov	r0, r2
 8005d46:	4798      	blx	r3
 8005d48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d4a:	e077      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 fab1 	bl	80062b6 <USBD_CtlError>
            err++;
 8005d54:	7afb      	ldrb	r3, [r7, #11]
 8005d56:	3301      	adds	r3, #1
 8005d58:	72fb      	strb	r3, [r7, #11]
          break;
 8005d5a:	e06f      	b.n	8005e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	7c12      	ldrb	r2, [r2, #16]
 8005d74:	f107 0108 	add.w	r1, r7, #8
 8005d78:	4610      	mov	r0, r2
 8005d7a:	4798      	blx	r3
 8005d7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d7e:	e05d      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa97 	bl	80062b6 <USBD_CtlError>
            err++;
 8005d88:	7afb      	ldrb	r3, [r7, #11]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	72fb      	strb	r3, [r7, #11]
          break;
 8005d8e:	e055      	b.n	8005e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	7c12      	ldrb	r2, [r2, #16]
 8005da8:	f107 0108 	add.w	r1, r7, #8
 8005dac:	4610      	mov	r0, r2
 8005dae:	4798      	blx	r3
 8005db0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005db2:	e043      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005db4:	6839      	ldr	r1, [r7, #0]
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa7d 	bl	80062b6 <USBD_CtlError>
            err++;
 8005dbc:	7afb      	ldrb	r3, [r7, #11]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	72fb      	strb	r3, [r7, #11]
          break;
 8005dc2:	e03b      	b.n	8005e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00b      	beq.n	8005de8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	7c12      	ldrb	r2, [r2, #16]
 8005ddc:	f107 0108 	add.w	r1, r7, #8
 8005de0:	4610      	mov	r0, r2
 8005de2:	4798      	blx	r3
 8005de4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005de6:	e029      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005de8:	6839      	ldr	r1, [r7, #0]
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fa63 	bl	80062b6 <USBD_CtlError>
            err++;
 8005df0:	7afb      	ldrb	r3, [r7, #11]
 8005df2:	3301      	adds	r3, #1
 8005df4:	72fb      	strb	r3, [r7, #11]
          break;
 8005df6:	e021      	b.n	8005e3c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d00b      	beq.n	8005e1c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	7c12      	ldrb	r2, [r2, #16]
 8005e10:	f107 0108 	add.w	r1, r7, #8
 8005e14:	4610      	mov	r0, r2
 8005e16:	4798      	blx	r3
 8005e18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e1a:	e00f      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fa49 	bl	80062b6 <USBD_CtlError>
            err++;
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	3301      	adds	r3, #1
 8005e28:	72fb      	strb	r3, [r7, #11]
          break;
 8005e2a:	e007      	b.n	8005e3c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fa41 	bl	80062b6 <USBD_CtlError>
          err++;
 8005e34:	7afb      	ldrb	r3, [r7, #11]
 8005e36:	3301      	adds	r3, #1
 8005e38:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005e3a:	bf00      	nop
      }
      break;
 8005e3c:	e037      	b.n	8005eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7c1b      	ldrb	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d109      	bne.n	8005e5a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	f107 0208 	add.w	r2, r7, #8
 8005e52:	4610      	mov	r0, r2
 8005e54:	4798      	blx	r3
 8005e56:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e58:	e029      	b.n	8005eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa2a 	bl	80062b6 <USBD_CtlError>
        err++;
 8005e62:	7afb      	ldrb	r3, [r7, #11]
 8005e64:	3301      	adds	r3, #1
 8005e66:	72fb      	strb	r3, [r7, #11]
      break;
 8005e68:	e021      	b.n	8005eae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	7c1b      	ldrb	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10d      	bne.n	8005e8e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	f107 0208 	add.w	r2, r7, #8
 8005e7e:	4610      	mov	r0, r2
 8005e80:	4798      	blx	r3
 8005e82:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	3301      	adds	r3, #1
 8005e88:	2207      	movs	r2, #7
 8005e8a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e8c:	e00f      	b.n	8005eae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa10 	bl	80062b6 <USBD_CtlError>
        err++;
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	72fb      	strb	r3, [r7, #11]
      break;
 8005e9c:	e007      	b.n	8005eae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005e9e:	6839      	ldr	r1, [r7, #0]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f000 fa08 	bl	80062b6 <USBD_CtlError>
      err++;
 8005ea6:	7afb      	ldrb	r3, [r7, #11]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	72fb      	strb	r3, [r7, #11]
      break;
 8005eac:	bf00      	nop
  }

  if (err != 0U)
 8005eae:	7afb      	ldrb	r3, [r7, #11]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d11e      	bne.n	8005ef2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	88db      	ldrh	r3, [r3, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d016      	beq.n	8005eea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005ebc:	893b      	ldrh	r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00e      	beq.n	8005ee0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	88da      	ldrh	r2, [r3, #6]
 8005ec6:	893b      	ldrh	r3, [r7, #8]
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	bf28      	it	cs
 8005ecc:	4613      	movcs	r3, r2
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ed2:	893b      	ldrh	r3, [r7, #8]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f000 fa5d 	bl	8006398 <USBD_CtlSendData>
 8005ede:	e009      	b.n	8005ef4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f9e7 	bl	80062b6 <USBD_CtlError>
 8005ee8:	e004      	b.n	8005ef4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 faae 	bl	800644c <USBD_CtlSendStatus>
 8005ef0:	e000      	b.n	8005ef4 <USBD_GetDescriptor+0x2cc>
    return;
 8005ef2:	bf00      	nop
  }
}
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop

08005efc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	889b      	ldrh	r3, [r3, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d131      	bne.n	8005f72 <USBD_SetAddress+0x76>
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	88db      	ldrh	r3, [r3, #6]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d12d      	bne.n	8005f72 <USBD_SetAddress+0x76>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	885b      	ldrh	r3, [r3, #2]
 8005f1a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f1c:	d829      	bhi.n	8005f72 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	885b      	ldrh	r3, [r3, #2]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f28:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d104      	bne.n	8005f40 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f36:	6839      	ldr	r1, [r7, #0]
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 f9bc 	bl	80062b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f3e:	e01d      	b.n	8005f7c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	7bfa      	ldrb	r2, [r7, #15]
 8005f44:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 feed 	bl	8006d2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fa7a 	bl	800644c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d004      	beq.n	8005f68 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	e009      	b.n	8005f7c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f70:	e004      	b.n	8005f7c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005f72:	6839      	ldr	r1, [r7, #0]
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 f99e 	bl	80062b6 <USBD_CtlError>
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	bf00      	nop
 8005f7e:	3710      	adds	r7, #16
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	885b      	ldrh	r3, [r3, #2]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <USBD_SetConfig+0x150>)
 8005f9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f9c:	4b4d      	ldr	r3, [pc, #308]	; (80060d4 <USBD_SetConfig+0x150>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d905      	bls.n	8005fb0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f985 	bl	80062b6 <USBD_CtlError>
    return USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	e08c      	b.n	80060ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d002      	beq.n	8005fc2 <USBD_SetConfig+0x3e>
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d029      	beq.n	8006014 <USBD_SetConfig+0x90>
 8005fc0:	e075      	b.n	80060ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005fc2:	4b44      	ldr	r3, [pc, #272]	; (80060d4 <USBD_SetConfig+0x150>)
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d020      	beq.n	800600c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005fca:	4b42      	ldr	r3, [pc, #264]	; (80060d4 <USBD_SetConfig+0x150>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fd4:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <USBD_SetConfig+0x150>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f7fe ffe7 	bl	8004fae <USBD_SetClassConfig>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f962 	bl	80062b6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005ffa:	e065      	b.n	80060c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fa25 	bl	800644c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2203      	movs	r2, #3
 8006006:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800600a:	e05d      	b.n	80060c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fa1d 	bl	800644c <USBD_CtlSendStatus>
      break;
 8006012:	e059      	b.n	80060c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006014:	4b2f      	ldr	r3, [pc, #188]	; (80060d4 <USBD_SetConfig+0x150>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d112      	bne.n	8006042 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <USBD_SetConfig+0x150>)
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	461a      	mov	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800602e:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <USBD_SetConfig+0x150>)
 8006030:	781b      	ldrb	r3, [r3, #0]
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fe ffd6 	bl	8004fe6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa06 	bl	800644c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006040:	e042      	b.n	80060c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006042:	4b24      	ldr	r3, [pc, #144]	; (80060d4 <USBD_SetConfig+0x150>)
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d02a      	beq.n	80060a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	4619      	mov	r1, r3
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fe ffc4 	bl	8004fe6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <USBD_SetConfig+0x150>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006068:	4b1a      	ldr	r3, [pc, #104]	; (80060d4 <USBD_SetConfig+0x150>)
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	4619      	mov	r1, r3
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fe ff9d 	bl	8004fae <USBD_SetClassConfig>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006078:	7bfb      	ldrb	r3, [r7, #15]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00f      	beq.n	800609e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800607e:	6839      	ldr	r1, [r7, #0]
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f918 	bl	80062b6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	b2db      	uxtb	r3, r3
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fe ffa9 	bl	8004fe6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2202      	movs	r2, #2
 8006098:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800609c:	e014      	b.n	80060c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f9d4 	bl	800644c <USBD_CtlSendStatus>
      break;
 80060a4:	e010      	b.n	80060c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f9d0 	bl	800644c <USBD_CtlSendStatus>
      break;
 80060ac:	e00c      	b.n	80060c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 f900 	bl	80062b6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <USBD_SetConfig+0x150>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	4619      	mov	r1, r3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f7fe ff92 	bl	8004fe6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
 80060c4:	73fb      	strb	r3, [r7, #15]
      break;
 80060c6:	bf00      	nop
  }

  return ret;
 80060c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000134 	.word	0x20000134

080060d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	88db      	ldrh	r3, [r3, #6]
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d004      	beq.n	80060f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8e2 	bl	80062b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80060f2:	e023      	b.n	800613c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	dc02      	bgt.n	8006106 <USBD_GetConfig+0x2e>
 8006100:	2b00      	cmp	r3, #0
 8006102:	dc03      	bgt.n	800610c <USBD_GetConfig+0x34>
 8006104:	e015      	b.n	8006132 <USBD_GetConfig+0x5a>
 8006106:	2b03      	cmp	r3, #3
 8006108:	d00b      	beq.n	8006122 <USBD_GetConfig+0x4a>
 800610a:	e012      	b.n	8006132 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	3308      	adds	r3, #8
 8006116:	2201      	movs	r2, #1
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f93c 	bl	8006398 <USBD_CtlSendData>
        break;
 8006120:	e00c      	b.n	800613c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	2201      	movs	r2, #1
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f934 	bl	8006398 <USBD_CtlSendData>
        break;
 8006130:	e004      	b.n	800613c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f8be 	bl	80062b6 <USBD_CtlError>
        break;
 800613a:	bf00      	nop
}
 800613c:	bf00      	nop
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006154:	b2db      	uxtb	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	2b02      	cmp	r3, #2
 800615a:	d81e      	bhi.n	800619a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	88db      	ldrh	r3, [r3, #6]
 8006160:	2b02      	cmp	r3, #2
 8006162:	d004      	beq.n	800616e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8a5 	bl	80062b6 <USBD_CtlError>
        break;
 800616c:	e01a      	b.n	80061a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800617a:	2b00      	cmp	r3, #0
 800617c:	d005      	beq.n	800618a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f043 0202 	orr.w	r2, r3, #2
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	330c      	adds	r3, #12
 800618e:	2202      	movs	r2, #2
 8006190:	4619      	mov	r1, r3
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 f900 	bl	8006398 <USBD_CtlSendData>
      break;
 8006198:	e004      	b.n	80061a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 f88a 	bl	80062b6 <USBD_CtlError>
      break;
 80061a2:	bf00      	nop
  }
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b082      	sub	sp, #8
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	885b      	ldrh	r3, [r3, #2]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d107      	bne.n	80061ce <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f940 	bl	800644c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80061cc:	e013      	b.n	80061f6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	885b      	ldrh	r3, [r3, #2]
 80061d2:	2b02      	cmp	r3, #2
 80061d4:	d10b      	bne.n	80061ee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	889b      	ldrh	r3, [r3, #4]
 80061da:	0a1b      	lsrs	r3, r3, #8
 80061dc:	b29b      	uxth	r3, r3
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f930 	bl	800644c <USBD_CtlSendStatus>
}
 80061ec:	e003      	b.n	80061f6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80061ee:	6839      	ldr	r1, [r7, #0]
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f860 	bl	80062b6 <USBD_CtlError>
}
 80061f6:	bf00      	nop
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b082      	sub	sp, #8
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800620e:	b2db      	uxtb	r3, r3
 8006210:	3b01      	subs	r3, #1
 8006212:	2b02      	cmp	r3, #2
 8006214:	d80b      	bhi.n	800622e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	885b      	ldrh	r3, [r3, #2]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10c      	bne.n	8006238 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f910 	bl	800644c <USBD_CtlSendStatus>
      }
      break;
 800622c:	e004      	b.n	8006238 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800622e:	6839      	ldr	r1, [r7, #0]
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f840 	bl	80062b6 <USBD_CtlError>
      break;
 8006236:	e000      	b.n	800623a <USBD_ClrFeature+0x3c>
      break;
 8006238:	bf00      	nop
  }
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
 800624a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	3301      	adds	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f7ff fa41 	bl	80056f4 <SWAPBYTE>
 8006272:	4603      	mov	r3, r0
 8006274:	461a      	mov	r2, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	3301      	adds	r3, #1
 800627e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fa34 	bl	80056f4 <SWAPBYTE>
 800628c:	4603      	mov	r3, r0
 800628e:	461a      	mov	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3301      	adds	r3, #1
 8006298:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3301      	adds	r3, #1
 800629e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff fa27 	bl	80056f4 <SWAPBYTE>
 80062a6:	4603      	mov	r3, r0
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	80da      	strh	r2, [r3, #6]
}
 80062ae:	bf00      	nop
 80062b0:	3710      	adds	r7, #16
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}

080062b6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062b6:	b580      	push	{r7, lr}
 80062b8:	b082      	sub	sp, #8
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
 80062be:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062c0:	2180      	movs	r1, #128	; 0x80
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 fcc8 	bl	8006c58 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062c8:	2100      	movs	r1, #0
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 fcc4 	bl	8006c58 <USBD_LL_StallEP>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d036      	beq.n	800635c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80062f2:	6938      	ldr	r0, [r7, #16]
 80062f4:	f000 f836 	bl	8006364 <USBD_GetLen>
 80062f8:	4603      	mov	r3, r0
 80062fa:	3301      	adds	r3, #1
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	005b      	lsls	r3, r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006306:	7dfb      	ldrb	r3, [r7, #23]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	4413      	add	r3, r2
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	7812      	ldrb	r2, [r2, #0]
 8006310:	701a      	strb	r2, [r3, #0]
  idx++;
 8006312:	7dfb      	ldrb	r3, [r7, #23]
 8006314:	3301      	adds	r3, #1
 8006316:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	68ba      	ldr	r2, [r7, #8]
 800631c:	4413      	add	r3, r2
 800631e:	2203      	movs	r2, #3
 8006320:	701a      	strb	r2, [r3, #0]
  idx++;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	3301      	adds	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006328:	e013      	b.n	8006352 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	4413      	add	r3, r2
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	7812      	ldrb	r2, [r2, #0]
 8006334:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	3301      	adds	r3, #1
 800633a:	613b      	str	r3, [r7, #16]
    idx++;
 800633c:	7dfb      	ldrb	r3, [r7, #23]
 800633e:	3301      	adds	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	4413      	add	r3, r2
 8006348:	2200      	movs	r2, #0
 800634a:	701a      	strb	r2, [r3, #0]
    idx++;
 800634c:	7dfb      	ldrb	r3, [r7, #23]
 800634e:	3301      	adds	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1e7      	bne.n	800632a <USBD_GetString+0x52>
 800635a:	e000      	b.n	800635e <USBD_GetString+0x86>
    return;
 800635c:	bf00      	nop
  }
}
 800635e:	3718      	adds	r7, #24
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006374:	e005      	b.n	8006382 <USBD_GetLen+0x1e>
  {
    len++;
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	3301      	adds	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	3301      	adds	r3, #1
 8006380:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f5      	bne.n	8006376 <USBD_GetLen+0x12>
  }

  return len;
 800638a:	7bfb      	ldrb	r3, [r7, #15]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2202      	movs	r2, #2
 80063a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	68ba      	ldr	r2, [r7, #8]
 80063bc:	2100      	movs	r1, #0
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fcd3 	bl	8006d6a <USBD_LL_Transmit>

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3710      	adds	r7, #16
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b084      	sub	sp, #16
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	2100      	movs	r1, #0
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f000 fcc2 	bl	8006d6a <USBD_LL_Transmit>

  return USBD_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3710      	adds	r7, #16
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}

080063f0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2203      	movs	r2, #3
 8006400:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	2100      	movs	r1, #0
 800641a:	68f8      	ldr	r0, [r7, #12]
 800641c:	f000 fcc6 	bl	8006dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	2100      	movs	r1, #0
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	f000 fcb5 	bl	8006dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2204      	movs	r2, #4
 8006458:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800645c:	2300      	movs	r3, #0
 800645e:	2200      	movs	r2, #0
 8006460:	2100      	movs	r1, #0
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 fc81 	bl	8006d6a <USBD_LL_Transmit>

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3708      	adds	r7, #8
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b082      	sub	sp, #8
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2205      	movs	r2, #5
 800647e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006482:	2300      	movs	r3, #0
 8006484:	2200      	movs	r2, #0
 8006486:	2100      	movs	r1, #0
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 fc8f 	bl	8006dac <USBD_LL_PrepareReceive>

  return USBD_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800649c:	2200      	movs	r2, #0
 800649e:	4912      	ldr	r1, [pc, #72]	; (80064e8 <MX_USB_DEVICE_Init+0x50>)
 80064a0:	4812      	ldr	r0, [pc, #72]	; (80064ec <MX_USB_DEVICE_Init+0x54>)
 80064a2:	f7fe fd07 	bl	8004eb4 <USBD_Init>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80064ac:	f7fa f924 	bl	80006f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80064b0:	490f      	ldr	r1, [pc, #60]	; (80064f0 <MX_USB_DEVICE_Init+0x58>)
 80064b2:	480e      	ldr	r0, [pc, #56]	; (80064ec <MX_USB_DEVICE_Init+0x54>)
 80064b4:	f7fe fd2e 	bl	8004f14 <USBD_RegisterClass>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80064be:	f7fa f91b 	bl	80006f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80064c2:	490c      	ldr	r1, [pc, #48]	; (80064f4 <MX_USB_DEVICE_Init+0x5c>)
 80064c4:	4809      	ldr	r0, [pc, #36]	; (80064ec <MX_USB_DEVICE_Init+0x54>)
 80064c6:	f7fe fc65 	bl	8004d94 <USBD_CDC_RegisterInterface>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80064d0:	f7fa f912 	bl	80006f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80064d4:	4805      	ldr	r0, [pc, #20]	; (80064ec <MX_USB_DEVICE_Init+0x54>)
 80064d6:	f7fe fd53 	bl	8004f80 <USBD_Start>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80064e0:	f7fa f90a 	bl	80006f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80064e4:	bf00      	nop
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	200000ac 	.word	0x200000ac
 80064ec:	20000138 	.word	0x20000138
 80064f0:	20000018 	.word	0x20000018
 80064f4:	20000098 	.word	0x20000098

080064f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80064fc:	2200      	movs	r2, #0
 80064fe:	4905      	ldr	r1, [pc, #20]	; (8006514 <CDC_Init_FS+0x1c>)
 8006500:	4805      	ldr	r0, [pc, #20]	; (8006518 <CDC_Init_FS+0x20>)
 8006502:	f7fe fc61 	bl	8004dc8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006506:	4905      	ldr	r1, [pc, #20]	; (800651c <CDC_Init_FS+0x24>)
 8006508:	4803      	ldr	r0, [pc, #12]	; (8006518 <CDC_Init_FS+0x20>)
 800650a:	f7fe fc7f 	bl	8004e0c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800650e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000c14 	.word	0x20000c14
 8006518:	20000138 	.word	0x20000138
 800651c:	20000414 	.word	0x20000414

08006520 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006524:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006526:	4618      	mov	r0, r3
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	4603      	mov	r3, r0
 8006538:	6039      	str	r1, [r7, #0]
 800653a:	71fb      	strb	r3, [r7, #7]
 800653c:	4613      	mov	r3, r2
 800653e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006540:	79fb      	ldrb	r3, [r7, #7]
 8006542:	2b23      	cmp	r3, #35	; 0x23
 8006544:	d84a      	bhi.n	80065dc <CDC_Control_FS+0xac>
 8006546:	a201      	add	r2, pc, #4	; (adr r2, 800654c <CDC_Control_FS+0x1c>)
 8006548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654c:	080065dd 	.word	0x080065dd
 8006550:	080065dd 	.word	0x080065dd
 8006554:	080065dd 	.word	0x080065dd
 8006558:	080065dd 	.word	0x080065dd
 800655c:	080065dd 	.word	0x080065dd
 8006560:	080065dd 	.word	0x080065dd
 8006564:	080065dd 	.word	0x080065dd
 8006568:	080065dd 	.word	0x080065dd
 800656c:	080065dd 	.word	0x080065dd
 8006570:	080065dd 	.word	0x080065dd
 8006574:	080065dd 	.word	0x080065dd
 8006578:	080065dd 	.word	0x080065dd
 800657c:	080065dd 	.word	0x080065dd
 8006580:	080065dd 	.word	0x080065dd
 8006584:	080065dd 	.word	0x080065dd
 8006588:	080065dd 	.word	0x080065dd
 800658c:	080065dd 	.word	0x080065dd
 8006590:	080065dd 	.word	0x080065dd
 8006594:	080065dd 	.word	0x080065dd
 8006598:	080065dd 	.word	0x080065dd
 800659c:	080065dd 	.word	0x080065dd
 80065a0:	080065dd 	.word	0x080065dd
 80065a4:	080065dd 	.word	0x080065dd
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065dd 	.word	0x080065dd
 80065b0:	080065dd 	.word	0x080065dd
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065dd 	.word	0x080065dd
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065dd 	.word	0x080065dd
 80065c4:	080065dd 	.word	0x080065dd
 80065c8:	080065dd 	.word	0x080065dd
 80065cc:	080065dd 	.word	0x080065dd
 80065d0:	080065dd 	.word	0x080065dd
 80065d4:	080065dd 	.word	0x080065dd
 80065d8:	080065dd 	.word	0x080065dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80065dc:	bf00      	nop
  }

  return (USBD_OK);
 80065de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr

080065ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80065ec:	b5b0      	push	{r4, r5, r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80065f6:	6879      	ldr	r1, [r7, #4]
 80065f8:	480b      	ldr	r0, [pc, #44]	; (8006628 <CDC_Receive_FS+0x3c>)
 80065fa:	f7fe fc07 	bl	8004e0c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80065fe:	480a      	ldr	r0, [pc, #40]	; (8006628 <CDC_Receive_FS+0x3c>)
 8006600:	f7fe fc22 	bl	8004e48 <USBD_CDC_ReceivePacket>
  memcpy (receivebuffer, Buf, 20);
 8006604:	4b09      	ldr	r3, [pc, #36]	; (800662c <CDC_Receive_FS+0x40>)
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6811      	ldr	r1, [r2, #0]
 800660a:	6855      	ldr	r5, [r2, #4]
 800660c:	6894      	ldr	r4, [r2, #8]
 800660e:	68d0      	ldr	r0, [r2, #12]
 8006610:	6019      	str	r1, [r3, #0]
 8006612:	605d      	str	r5, [r3, #4]
 8006614:	609c      	str	r4, [r3, #8]
 8006616:	60d8      	str	r0, [r3, #12]
 8006618:	6911      	ldr	r1, [r2, #16]
 800661a:	6119      	str	r1, [r3, #16]
  return (USBD_OK);
 800661c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bdb0      	pop	{r4, r5, r7, pc}
 8006626:	bf00      	nop
 8006628:	20000138 	.word	0x20000138
 800662c:	2000011c 	.word	0x2000011c

08006630 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	4613      	mov	r3, r2
 800663c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006642:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006646:	4618      	mov	r0, r3
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
	...

08006654 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	4603      	mov	r3, r0
 800665c:	6039      	str	r1, [r7, #0]
 800665e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2212      	movs	r2, #18
 8006664:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006666:	4b03      	ldr	r3, [pc, #12]	; (8006674 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	200000c8 	.word	0x200000c8

08006678 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	2204      	movs	r2, #4
 8006688:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800668a:	4b03      	ldr	r3, [pc, #12]	; (8006698 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800668c:	4618      	mov	r0, r3
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	200000dc 	.word	0x200000dc

0800669c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	4603      	mov	r3, r0
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	4907      	ldr	r1, [pc, #28]	; (80066d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80066b2:	4808      	ldr	r0, [pc, #32]	; (80066d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80066b4:	f7ff fe10 	bl	80062d8 <USBD_GetString>
 80066b8:	e004      	b.n	80066c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	4904      	ldr	r1, [pc, #16]	; (80066d0 <USBD_FS_ProductStrDescriptor+0x34>)
 80066be:	4805      	ldr	r0, [pc, #20]	; (80066d4 <USBD_FS_ProductStrDescriptor+0x38>)
 80066c0:	f7ff fe0a 	bl	80062d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80066c4:	4b02      	ldr	r3, [pc, #8]	; (80066d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20001414 	.word	0x20001414
 80066d4:	08006f0c 	.word	0x08006f0c

080066d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066e4:	683a      	ldr	r2, [r7, #0]
 80066e6:	4904      	ldr	r1, [pc, #16]	; (80066f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80066e8:	4804      	ldr	r0, [pc, #16]	; (80066fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80066ea:	f7ff fdf5 	bl	80062d8 <USBD_GetString>
  return USBD_StrDesc;
 80066ee:	4b02      	ldr	r3, [pc, #8]	; (80066f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20001414 	.word	0x20001414
 80066fc:	08006f24 	.word	0x08006f24

08006700 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	4603      	mov	r3, r0
 8006708:	6039      	str	r1, [r7, #0]
 800670a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	221a      	movs	r2, #26
 8006710:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006712:	f000 f843 	bl	800679c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006716:	4b02      	ldr	r3, [pc, #8]	; (8006720 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	200000e0 	.word	0x200000e0

08006724 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	6039      	str	r1, [r7, #0]
 800672e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d105      	bne.n	8006742 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006736:	683a      	ldr	r2, [r7, #0]
 8006738:	4907      	ldr	r1, [pc, #28]	; (8006758 <USBD_FS_ConfigStrDescriptor+0x34>)
 800673a:	4808      	ldr	r0, [pc, #32]	; (800675c <USBD_FS_ConfigStrDescriptor+0x38>)
 800673c:	f7ff fdcc 	bl	80062d8 <USBD_GetString>
 8006740:	e004      	b.n	800674c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	4904      	ldr	r1, [pc, #16]	; (8006758 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006746:	4805      	ldr	r0, [pc, #20]	; (800675c <USBD_FS_ConfigStrDescriptor+0x38>)
 8006748:	f7ff fdc6 	bl	80062d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800674c:	4b02      	ldr	r3, [pc, #8]	; (8006758 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800674e:	4618      	mov	r0, r3
 8006750:	3708      	adds	r7, #8
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20001414 	.word	0x20001414
 800675c:	08006f38 	.word	0x08006f38

08006760 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	6039      	str	r1, [r7, #0]
 800676a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d105      	bne.n	800677e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006772:	683a      	ldr	r2, [r7, #0]
 8006774:	4907      	ldr	r1, [pc, #28]	; (8006794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006776:	4808      	ldr	r0, [pc, #32]	; (8006798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006778:	f7ff fdae 	bl	80062d8 <USBD_GetString>
 800677c:	e004      	b.n	8006788 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	4904      	ldr	r1, [pc, #16]	; (8006794 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006782:	4805      	ldr	r0, [pc, #20]	; (8006798 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006784:	f7ff fda8 	bl	80062d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006788:	4b02      	ldr	r3, [pc, #8]	; (8006794 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	20001414 	.word	0x20001414
 8006798:	08006f44 	.word	0x08006f44

0800679c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067a2:	4b0f      	ldr	r3, [pc, #60]	; (80067e0 <Get_SerialNum+0x44>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067a8:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <Get_SerialNum+0x48>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <Get_SerialNum+0x4c>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067b4:	68fa      	ldr	r2, [r7, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067c2:	2208      	movs	r2, #8
 80067c4:	4909      	ldr	r1, [pc, #36]	; (80067ec <Get_SerialNum+0x50>)
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 f814 	bl	80067f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067cc:	2204      	movs	r2, #4
 80067ce:	4908      	ldr	r1, [pc, #32]	; (80067f0 <Get_SerialNum+0x54>)
 80067d0:	68b8      	ldr	r0, [r7, #8]
 80067d2:	f000 f80f 	bl	80067f4 <IntToUnicode>
  }
}
 80067d6:	bf00      	nop
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	1fff7a10 	.word	0x1fff7a10
 80067e4:	1fff7a14 	.word	0x1fff7a14
 80067e8:	1fff7a18 	.word	0x1fff7a18
 80067ec:	200000e2 	.word	0x200000e2
 80067f0:	200000f2 	.word	0x200000f2

080067f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006802:	2300      	movs	r3, #0
 8006804:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006806:	2300      	movs	r3, #0
 8006808:	75fb      	strb	r3, [r7, #23]
 800680a:	e027      	b.n	800685c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	0f1b      	lsrs	r3, r3, #28
 8006810:	2b09      	cmp	r3, #9
 8006812:	d80b      	bhi.n	800682c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	0f1b      	lsrs	r3, r3, #28
 8006818:	b2da      	uxtb	r2, r3
 800681a:	7dfb      	ldrb	r3, [r7, #23]
 800681c:	005b      	lsls	r3, r3, #1
 800681e:	4619      	mov	r1, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	440b      	add	r3, r1
 8006824:	3230      	adds	r2, #48	; 0x30
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	e00a      	b.n	8006842 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4619      	mov	r1, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	440b      	add	r3, r1
 800683c:	3237      	adds	r2, #55	; 0x37
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	011b      	lsls	r3, r3, #4
 8006846:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006848:	7dfb      	ldrb	r3, [r7, #23]
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	3301      	adds	r3, #1
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	4413      	add	r3, r2
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006856:	7dfb      	ldrb	r3, [r7, #23]
 8006858:	3301      	adds	r3, #1
 800685a:	75fb      	strb	r3, [r7, #23]
 800685c:	7dfa      	ldrb	r2, [r7, #23]
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	429a      	cmp	r2, r3
 8006862:	d3d3      	bcc.n	800680c <IntToUnicode+0x18>
  }
}
 8006864:	bf00      	nop
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr
	...

08006874 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	; 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800687c:	f107 0314 	add.w	r3, r7, #20
 8006880:	2200      	movs	r2, #0
 8006882:	601a      	str	r2, [r3, #0]
 8006884:	605a      	str	r2, [r3, #4]
 8006886:	609a      	str	r2, [r3, #8]
 8006888:	60da      	str	r2, [r3, #12]
 800688a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006894:	d13a      	bne.n	800690c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006896:	2300      	movs	r3, #0
 8006898:	613b      	str	r3, [r7, #16]
 800689a:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	4a1d      	ldr	r2, [pc, #116]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068a0:	f043 0301 	orr.w	r3, r3, #1
 80068a4:	6313      	str	r3, [r2, #48]	; 0x30
 80068a6:	4b1b      	ldr	r3, [pc, #108]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	613b      	str	r3, [r7, #16]
 80068b0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80068b2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80068b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068b8:	2302      	movs	r3, #2
 80068ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068c0:	2303      	movs	r3, #3
 80068c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80068c4:	230a      	movs	r3, #10
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068c8:	f107 0314 	add.w	r3, r7, #20
 80068cc:	4619      	mov	r1, r3
 80068ce:	4812      	ldr	r0, [pc, #72]	; (8006918 <HAL_PCD_MspInit+0xa4>)
 80068d0:	f7fa f958 	bl	8000b84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80068d4:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068d8:	4a0e      	ldr	r2, [pc, #56]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068de:	6353      	str	r3, [r2, #52]	; 0x34
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e8:	4a0a      	ldr	r2, [pc, #40]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068ee:	6453      	str	r3, [r2, #68]	; 0x44
 80068f0:	4b08      	ldr	r3, [pc, #32]	; (8006914 <HAL_PCD_MspInit+0xa0>)
 80068f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	2043      	movs	r0, #67	; 0x43
 8006902:	f7fa f908 	bl	8000b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006906:	2043      	movs	r0, #67	; 0x43
 8006908:	f7fa f921 	bl	8000b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800690c:	bf00      	nop
 800690e:	3728      	adds	r7, #40	; 0x28
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}
 8006914:	40023800 	.word	0x40023800
 8006918:	40020000 	.word	0x40020000

0800691c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006930:	4619      	mov	r1, r3
 8006932:	4610      	mov	r0, r2
 8006934:	f7fe fb71 	bl	800501a <USBD_LL_SetupStage>
}
 8006938:	bf00      	nop
 800693a:	3708      	adds	r7, #8
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	440b      	add	r3, r1
 8006960:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	78fb      	ldrb	r3, [r7, #3]
 8006968:	4619      	mov	r1, r3
 800696a:	f7fe fbab 	bl	80050c4 <USBD_LL_DataOutStage>
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	460b      	mov	r3, r1
 8006980:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006988:	78fa      	ldrb	r2, [r7, #3]
 800698a:	6879      	ldr	r1, [r7, #4]
 800698c:	4613      	mov	r3, r2
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	440b      	add	r3, r1
 8006996:	334c      	adds	r3, #76	; 0x4c
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	78fb      	ldrb	r3, [r7, #3]
 800699c:	4619      	mov	r1, r3
 800699e:	f7fe fc44 	bl	800522a <USBD_LL_DataInStage>
}
 80069a2:	bf00      	nop
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b082      	sub	sp, #8
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe fd78 	bl	80054ae <USBD_LL_SOF>
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80069ce:	2301      	movs	r3, #1
 80069d0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d102      	bne.n	80069e0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80069da:	2300      	movs	r3, #0
 80069dc:	73fb      	strb	r3, [r7, #15]
 80069de:	e008      	b.n	80069f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d102      	bne.n	80069ee <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80069e8:	2301      	movs	r3, #1
 80069ea:	73fb      	strb	r3, [r7, #15]
 80069ec:	e001      	b.n	80069f2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80069ee:	f7f9 fe83 	bl	80006f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80069f8:	7bfa      	ldrb	r2, [r7, #15]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fe fd18 	bl	8005432 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fe fcc0 	bl	800538e <USBD_LL_Reset>
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
	...

08006a18 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fd13 	bl	8005452 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006a3e:	f043 0301 	orr.w	r3, r3, #1
 8006a42:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d005      	beq.n	8006a58 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <HAL_PCD_SuspendCallback+0x48>)
 8006a4e:	691b      	ldr	r3, [r3, #16]
 8006a50:	4a03      	ldr	r2, [pc, #12]	; (8006a60 <HAL_PCD_SuspendCallback+0x48>)
 8006a52:	f043 0306 	orr.w	r3, r3, #6
 8006a56:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006a58:	bf00      	nop
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}
 8006a60:	e000ed00 	.word	0xe000ed00

08006a64 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fd03 	bl	800547e <USBD_LL_Resume>
}
 8006a78:	bf00      	nop
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	460b      	mov	r3, r1
 8006a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006a92:	78fa      	ldrb	r2, [r7, #3]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fd5b 	bl	8005552 <USBD_LL_IsoOUTIncomplete>
}
 8006a9c:	bf00      	nop
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	460b      	mov	r3, r1
 8006aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	4611      	mov	r1, r2
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fd17 	bl	80054ee <USBD_LL_IsoINIncomplete>
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7fe fd6d 	bl	80055b6 <USBD_LL_DevConnected>
}
 8006adc:	bf00      	nop
 8006ade:	3708      	adds	r7, #8
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fd6a 	bl	80055cc <USBD_LL_DevDisconnected>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	781b      	ldrb	r3, [r3, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d13c      	bne.n	8006b8a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006b10:	4a20      	ldr	r2, [pc, #128]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b1c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006b20:	4b1c      	ldr	r3, [pc, #112]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b22:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006b26:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006b28:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b2a:	2204      	movs	r2, #4
 8006b2c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006b2e:	4b19      	ldr	r3, [pc, #100]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b30:	2202      	movs	r2, #2
 8006b32:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006b34:	4b17      	ldr	r3, [pc, #92]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006b3a:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006b40:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b42:	2200      	movs	r2, #0
 8006b44:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006b46:	4b13      	ldr	r3, [pc, #76]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006b4c:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006b58:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006b5e:	480d      	ldr	r0, [pc, #52]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b60:	f7fa f9dd 	bl	8000f1e <HAL_PCD_Init>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006b6a:	f7f9 fdc5 	bl	80006f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006b6e:	2180      	movs	r1, #128	; 0x80
 8006b70:	4808      	ldr	r0, [pc, #32]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b72:	f7fb fc34 	bl	80023de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	2100      	movs	r1, #0
 8006b7a:	4806      	ldr	r0, [pc, #24]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b7c:	f7fb fbe8 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006b80:	2280      	movs	r2, #128	; 0x80
 8006b82:	2101      	movs	r1, #1
 8006b84:	4803      	ldr	r0, [pc, #12]	; (8006b94 <USBD_LL_Init+0x94>)
 8006b86:	f7fb fbe3 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3708      	adds	r7, #8
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20001614 	.word	0x20001614

08006b98 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f7fa fad2 	bl	8001158 <HAL_PCD_Start>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006bb8:	7bfb      	ldrb	r3, [r7, #15]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 f942 	bl	8006e44 <USBD_Get_USB_Status>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	4611      	mov	r1, r2
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4603      	mov	r3, r0
 8006bde:	70fb      	strb	r3, [r7, #3]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70bb      	strb	r3, [r7, #2]
 8006be4:	4613      	mov	r3, r2
 8006be6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006bf6:	78bb      	ldrb	r3, [r7, #2]
 8006bf8:	883a      	ldrh	r2, [r7, #0]
 8006bfa:	78f9      	ldrb	r1, [r7, #3]
 8006bfc:	f7fa ffa3 	bl	8001b46 <HAL_PCD_EP_Open>
 8006c00:	4603      	mov	r3, r0
 8006c02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c04:	7bfb      	ldrb	r3, [r7, #15]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f000 f91c 	bl	8006e44 <USBD_Get_USB_Status>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	460b      	mov	r3, r1
 8006c24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c26:	2300      	movs	r3, #0
 8006c28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7fa ffec 	bl	8001c16 <HAL_PCD_EP_Close>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f8fd 	bl	8006e44 <USBD_Get_USB_Status>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006c72:	78fa      	ldrb	r2, [r7, #3]
 8006c74:	4611      	mov	r1, r2
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7fb f8c4 	bl	8001e04 <HAL_PCD_EP_SetStall>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f8de 	bl	8006e44 <USBD_Get_USB_Status>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b084      	sub	sp, #16
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7fb f909 	bl	8001ecc <HAL_PCD_EP_ClrStall>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 f8bf 	bl	8006e44 <USBD_Get_USB_Status>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ce6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	da0b      	bge.n	8006d08 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cf6:	68f9      	ldr	r1, [r7, #12]
 8006cf8:	4613      	mov	r3, r2
 8006cfa:	00db      	lsls	r3, r3, #3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	440b      	add	r3, r1
 8006d02:	333e      	adds	r3, #62	; 0x3e
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	e00b      	b.n	8006d20 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3714      	adds	r7, #20
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	460b      	mov	r3, r1
 8006d36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d46:	78fa      	ldrb	r2, [r7, #3]
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fa fed6 	bl	8001afc <HAL_PCD_SetAddress>
 8006d50:	4603      	mov	r3, r0
 8006d52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 f874 	bl	8006e44 <USBD_Get_USB_Status>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b086      	sub	sp, #24
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	460b      	mov	r3, r1
 8006d78:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006d88:	7af9      	ldrb	r1, [r7, #11]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	f7fa ffef 	bl	8001d70 <HAL_PCD_EP_Transmit>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 f853 	bl	8006e44 <USBD_Get_USB_Status>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006da2:	7dbb      	ldrb	r3, [r7, #22]
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3718      	adds	r7, #24
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b086      	sub	sp, #24
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	607a      	str	r2, [r7, #4]
 8006db6:	603b      	str	r3, [r7, #0]
 8006db8:	460b      	mov	r3, r1
 8006dba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006dca:	7af9      	ldrb	r1, [r7, #11]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	f7fa ff6b 	bl	8001caa <HAL_PCD_EP_Receive>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dd8:	7dfb      	ldrb	r3, [r7, #23]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 f832 	bl	8006e44 <USBD_Get_USB_Status>
 8006de0:	4603      	mov	r3, r0
 8006de2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006de4:	7dbb      	ldrb	r3, [r7, #22]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
 8006df6:	460b      	mov	r3, r1
 8006df8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	4611      	mov	r1, r2
 8006e04:	4618      	mov	r0, r3
 8006e06:	f7fa ff9b 	bl	8001d40 <HAL_PCD_EP_GetRxCount>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006e1c:	4b03      	ldr	r3, [pc, #12]	; (8006e2c <USBD_static_malloc+0x18>)
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20001b20 	.word	0x20001b20

08006e30 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b083      	sub	sp, #12
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]

}
 8006e38:	bf00      	nop
 8006e3a:	370c      	adds	r7, #12
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	2b03      	cmp	r3, #3
 8006e56:	d817      	bhi.n	8006e88 <USBD_Get_USB_Status+0x44>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <USBD_Get_USB_Status+0x1c>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e71 	.word	0x08006e71
 8006e64:	08006e77 	.word	0x08006e77
 8006e68:	08006e7d 	.word	0x08006e7d
 8006e6c:	08006e83 	.word	0x08006e83
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	73fb      	strb	r3, [r7, #15]
    break;
 8006e74:	e00b      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e76:	2303      	movs	r3, #3
 8006e78:	73fb      	strb	r3, [r7, #15]
    break;
 8006e7a:	e008      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e80:	e005      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e82:	2303      	movs	r3, #3
 8006e84:	73fb      	strb	r3, [r7, #15]
    break;
 8006e86:	e002      	b.n	8006e8e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e8c:	bf00      	nop
  }
  return usb_status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <__libc_init_array>:
 8006e9c:	b570      	push	{r4, r5, r6, lr}
 8006e9e:	4d0d      	ldr	r5, [pc, #52]	; (8006ed4 <__libc_init_array+0x38>)
 8006ea0:	4c0d      	ldr	r4, [pc, #52]	; (8006ed8 <__libc_init_array+0x3c>)
 8006ea2:	1b64      	subs	r4, r4, r5
 8006ea4:	10a4      	asrs	r4, r4, #2
 8006ea6:	2600      	movs	r6, #0
 8006ea8:	42a6      	cmp	r6, r4
 8006eaa:	d109      	bne.n	8006ec0 <__libc_init_array+0x24>
 8006eac:	4d0b      	ldr	r5, [pc, #44]	; (8006edc <__libc_init_array+0x40>)
 8006eae:	4c0c      	ldr	r4, [pc, #48]	; (8006ee0 <__libc_init_array+0x44>)
 8006eb0:	f000 f820 	bl	8006ef4 <_init>
 8006eb4:	1b64      	subs	r4, r4, r5
 8006eb6:	10a4      	asrs	r4, r4, #2
 8006eb8:	2600      	movs	r6, #0
 8006eba:	42a6      	cmp	r6, r4
 8006ebc:	d105      	bne.n	8006eca <__libc_init_array+0x2e>
 8006ebe:	bd70      	pop	{r4, r5, r6, pc}
 8006ec0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ec4:	4798      	blx	r3
 8006ec6:	3601      	adds	r6, #1
 8006ec8:	e7ee      	b.n	8006ea8 <__libc_init_array+0xc>
 8006eca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ece:	4798      	blx	r3
 8006ed0:	3601      	adds	r6, #1
 8006ed2:	e7f2      	b.n	8006eba <__libc_init_array+0x1e>
 8006ed4:	08006f6c 	.word	0x08006f6c
 8006ed8:	08006f6c 	.word	0x08006f6c
 8006edc:	08006f6c 	.word	0x08006f6c
 8006ee0:	08006f70 	.word	0x08006f70

08006ee4 <memset>:
 8006ee4:	4402      	add	r2, r0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d100      	bne.n	8006eee <memset+0xa>
 8006eec:	4770      	bx	lr
 8006eee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef2:	e7f9      	b.n	8006ee8 <memset+0x4>

08006ef4 <_init>:
 8006ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ef6:	bf00      	nop
 8006ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006efa:	bc08      	pop	{r3}
 8006efc:	469e      	mov	lr, r3
 8006efe:	4770      	bx	lr

08006f00 <_fini>:
 8006f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f02:	bf00      	nop
 8006f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f06:	bc08      	pop	{r3}
 8006f08:	469e      	mov	lr, r3
 8006f0a:	4770      	bx	lr
